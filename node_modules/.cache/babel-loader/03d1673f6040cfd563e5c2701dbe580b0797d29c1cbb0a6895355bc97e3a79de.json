{"ast":null,"code":"// Mock database for users (in a real app, this would be a backend API)\n// Initialize with some default users\nconst users=[{id:'1',email:'admin@newsapp.com',name:'Admin User',password:'Admin123!',// In real app, this would be hashed\nrole:'admin',isActive:true,savedArticles:[],createdAt:new Date().toISOString(),lastLogin:new Date().toISOString()},{id:'2',email:'user@newsapp.com',name:'Test User',password:'User123!',// In real app, this would be hashed\nrole:'user',isActive:true,savedArticles:[],createdAt:new Date().toISOString(),lastLogin:new Date().toISOString()}];// Load users from localStorage on startup\nconst loadUsers=()=>{const stored=localStorage.getItem('users');if(stored){return JSON.parse(stored);}// Save default users\nlocalStorage.setItem('users',JSON.stringify(users));return users;};// Save users to localStorage\nconst saveUsers=users=>{localStorage.setItem('users',JSON.stringify(users));};// Get all users (for admin)\nexport const getAllUsers=()=>{return loadUsers();};// Register new user\nexport const registerUser=async(email,password,name)=>{const currentUsers=loadUsers();// Check if email already exists\nif(currentUsers.find(user=>user.email.toLowerCase()===email.toLowerCase())){throw new Error('Email already registered');}// Validate password strength\nconst passwordErrors=validatePassword(password);if(passwordErrors.length>0){throw new Error(passwordErrors.join(', '));}// Validate email format\nif(!isValidEmail(email)){throw new Error('Invalid email format');}const newUser={id:`user-${Date.now()}`,email:email.toLowerCase(),name,password,// In real app, this would be hashed\nrole:'user',isActive:true,savedArticles:[],createdAt:new Date().toISOString()};currentUsers.push(newUser);saveUsers(currentUsers);// Return user without password\nconst{password:_,...userWithoutPassword}=newUser;return userWithoutPassword;};// Login user\nexport const loginUser=async(email,password)=>{const currentUsers=loadUsers();const user=currentUsers.find(u=>u.email.toLowerCase()===email.toLowerCase()&&u.password===password);if(!user){throw new Error('Invalid email or password');}if(!user.isActive){throw new Error('Account is deactivated. Please contact administrator.');}// Update last login\nuser.lastLogin=new Date().toISOString();saveUsers(currentUsers);// Return user without password\nconst{password:_,...userWithoutPassword}=user;return userWithoutPassword;};// Reset password\nexport const resetPassword=async(email,newPassword)=>{const currentUsers=loadUsers();const user=currentUsers.find(u=>u.email.toLowerCase()===email.toLowerCase());if(!user){throw new Error('User not found');}// Validate new password\nconst passwordErrors=validatePassword(newPassword);if(passwordErrors.length>0){throw new Error(passwordErrors.join(', '));}user.password=newPassword;// In real app, this would be hashed\nsaveUsers(currentUsers);};// Check if email exists (for forgot password)\nexport const checkEmailExists=async email=>{const currentUsers=loadUsers();return currentUsers.some(user=>user.email.toLowerCase()===email.toLowerCase());};// Admin functions\nexport const updateUserStatus=async(userId,isActive)=>{const currentUsers=loadUsers();const user=currentUsers.find(u=>u.id===userId);if(!user){throw new Error('User not found');}user.isActive=isActive;saveUsers(currentUsers);};export const updateUserRole=async(userId,role)=>{const currentUsers=loadUsers();const user=currentUsers.find(u=>u.id===userId);if(!user){throw new Error('User not found');}user.role=role;saveUsers(currentUsers);};export const deleteUser=async userId=>{const currentUsers=loadUsers();const filteredUsers=currentUsers.filter(u=>u.id!==userId);if(filteredUsers.length===currentUsers.length){throw new Error('User not found');}saveUsers(filteredUsers);};// Update user profile\nexport const updateUserProfile=async(userId,name,email)=>{const currentUsers=loadUsers();const user=currentUsers.find(u=>u.id===userId);if(!user){throw new Error('User not found');}// Check if email is already taken by another user\nconst emailExists=currentUsers.find(u=>u.id!==userId&&u.email.toLowerCase()===email.toLowerCase());if(emailExists){throw new Error('Email is already taken by another user');}// Validate email format\nif(!isValidEmail(email)){throw new Error('Invalid email format');}// Update user data\nuser.name=name;user.email=email.toLowerCase();saveUsers(currentUsers);// Return user without password\nconst{password:_,...userWithoutPassword}=user;return userWithoutPassword;};// Change user password\nexport const changeUserPassword=async(email,currentPassword,newPassword)=>{const currentUsers=loadUsers();const user=currentUsers.find(u=>u.email.toLowerCase()===email.toLowerCase());if(!user){throw new Error('User not found');}// Verify current password\nif(user.password!==currentPassword){throw new Error('Current password is incorrect');}// Validate new password\nconst passwordErrors=validatePassword(newPassword);if(passwordErrors.length>0){throw new Error(passwordErrors.join(', '));}// Update password\nuser.password=newPassword;// In real app, this would be hashed\nsaveUsers(currentUsers);};// Validation functions\nexport const validatePassword=password=>{const errors=[];if(password.length<8){errors.push('Password must be at least 8 characters long');}if(!/[A-Z]/.test(password)){errors.push('Password must contain at least one uppercase letter');}if(!/[a-z]/.test(password)){errors.push('Password must contain at least one lowercase letter');}if(!/\\d/.test(password)){errors.push('Password must contain at least one number');}if(!/[!@#$%^&*(),.?\":{}|<>]/.test(password)){errors.push('Password must contain at least one special character');}return errors;};export const isValidEmail=email=>{const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);};// Get user by ID\nexport const getUserById=userId=>{const currentUsers=loadUsers();const user=currentUsers.find(u=>u.id===userId);if(!user)return null;const{password:_,...userWithoutPassword}=user;return userWithoutPassword;};","map":{"version":3,"names":["users","id","email","name","password","role","isActive","savedArticles","createdAt","Date","toISOString","lastLogin","loadUsers","stored","localStorage","getItem","JSON","parse","setItem","stringify","saveUsers","getAllUsers","registerUser","currentUsers","find","user","toLowerCase","Error","passwordErrors","validatePassword","length","join","isValidEmail","newUser","now","push","_","userWithoutPassword","loginUser","u","resetPassword","newPassword","checkEmailExists","some","updateUserStatus","userId","updateUserRole","deleteUser","filteredUsers","filter","updateUserProfile","emailExists","changeUserPassword","currentPassword","errors","test","emailRegex","getUserById"],"sources":["D:/Curser Projects/src/services/authService.ts"],"sourcesContent":["import { User } from '../types';\r\n\r\n// Mock database for users (in a real app, this would be a backend API)\r\ninterface StoredUser extends User {\r\n  password: string;\r\n}\r\n\r\n// Initialize with some default users\r\nconst users: StoredUser[] = [\r\n  {\r\n    id: '1',\r\n    email: 'admin@newsapp.com',\r\n    name: 'Admin User',\r\n    password: 'Admin123!', // In real app, this would be hashed\r\n    role: 'admin',\r\n    isActive: true,\r\n    savedArticles: [],\r\n    createdAt: new Date().toISOString(),\r\n    lastLogin: new Date().toISOString()\r\n  },\r\n  {\r\n    id: '2',\r\n    email: 'user@newsapp.com',\r\n    name: 'Test User',\r\n    password: 'User123!', // In real app, this would be hashed\r\n    role: 'user',\r\n    isActive: true,\r\n    savedArticles: [],\r\n    createdAt: new Date().toISOString(),\r\n    lastLogin: new Date().toISOString()\r\n  }\r\n];\r\n\r\n// Load users from localStorage on startup\r\nconst loadUsers = (): StoredUser[] => {\r\n  const stored = localStorage.getItem('users');\r\n  if (stored) {\r\n    return JSON.parse(stored);\r\n  }\r\n  // Save default users\r\n  localStorage.setItem('users', JSON.stringify(users));\r\n  return users;\r\n};\r\n\r\n// Save users to localStorage\r\nconst saveUsers = (users: StoredUser[]) => {\r\n  localStorage.setItem('users', JSON.stringify(users));\r\n};\r\n\r\n// Get all users (for admin)\r\nexport const getAllUsers = (): StoredUser[] => {\r\n  return loadUsers();\r\n};\r\n\r\n// Register new user\r\nexport const registerUser = async (email: string, password: string, name: string): Promise<User> => {\r\n  const currentUsers = loadUsers();\r\n  \r\n  // Check if email already exists\r\n  if (currentUsers.find(user => user.email.toLowerCase() === email.toLowerCase())) {\r\n    throw new Error('Email already registered');\r\n  }\r\n\r\n  // Validate password strength\r\n  const passwordErrors = validatePassword(password);\r\n  if (passwordErrors.length > 0) {\r\n    throw new Error(passwordErrors.join(', '));\r\n  }\r\n\r\n  // Validate email format\r\n  if (!isValidEmail(email)) {\r\n    throw new Error('Invalid email format');\r\n  }\r\n\r\n  const newUser: StoredUser = {\r\n    id: `user-${Date.now()}`,\r\n    email: email.toLowerCase(),\r\n    name,\r\n    password, // In real app, this would be hashed\r\n    role: 'user',\r\n    isActive: true,\r\n    savedArticles: [],\r\n    createdAt: new Date().toISOString()\r\n  };\r\n\r\n  currentUsers.push(newUser);\r\n  saveUsers(currentUsers);\r\n\r\n  // Return user without password\r\n  const { password: _, ...userWithoutPassword } = newUser;\r\n  return userWithoutPassword;\r\n};\r\n\r\n// Login user\r\nexport const loginUser = async (email: string, password: string): Promise<User> => {\r\n  const currentUsers = loadUsers();\r\n  \r\n  const user = currentUsers.find(\r\n    u => u.email.toLowerCase() === email.toLowerCase() && u.password === password\r\n  );\r\n\r\n  if (!user) {\r\n    throw new Error('Invalid email or password');\r\n  }\r\n\r\n  if (!user.isActive) {\r\n    throw new Error('Account is deactivated. Please contact administrator.');\r\n  }\r\n\r\n  // Update last login\r\n  user.lastLogin = new Date().toISOString();\r\n  saveUsers(currentUsers);\r\n\r\n  // Return user without password\r\n  const { password: _, ...userWithoutPassword } = user;\r\n  return userWithoutPassword;\r\n};\r\n\r\n// Reset password\r\nexport const resetPassword = async (email: string, newPassword: string): Promise<void> => {\r\n  const currentUsers = loadUsers();\r\n  \r\n  const user = currentUsers.find(u => u.email.toLowerCase() === email.toLowerCase());\r\n  if (!user) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  // Validate new password\r\n  const passwordErrors = validatePassword(newPassword);\r\n  if (passwordErrors.length > 0) {\r\n    throw new Error(passwordErrors.join(', '));\r\n  }\r\n\r\n  user.password = newPassword; // In real app, this would be hashed\r\n  saveUsers(currentUsers);\r\n};\r\n\r\n// Check if email exists (for forgot password)\r\nexport const checkEmailExists = async (email: string): Promise<boolean> => {\r\n  const currentUsers = loadUsers();\r\n  return currentUsers.some(user => user.email.toLowerCase() === email.toLowerCase());\r\n};\r\n\r\n// Admin functions\r\nexport const updateUserStatus = async (userId: string, isActive: boolean): Promise<void> => {\r\n  const currentUsers = loadUsers();\r\n  const user = currentUsers.find(u => u.id === userId);\r\n  \r\n  if (!user) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  user.isActive = isActive;\r\n  saveUsers(currentUsers);\r\n};\r\n\r\nexport const updateUserRole = async (userId: string, role: 'user' | 'admin'): Promise<void> => {\r\n  const currentUsers = loadUsers();\r\n  const user = currentUsers.find(u => u.id === userId);\r\n  \r\n  if (!user) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  user.role = role;\r\n  saveUsers(currentUsers);\r\n};\r\n\r\nexport const deleteUser = async (userId: string): Promise<void> => {\r\n  const currentUsers = loadUsers();\r\n  const filteredUsers = currentUsers.filter(u => u.id !== userId);\r\n  \r\n  if (filteredUsers.length === currentUsers.length) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  saveUsers(filteredUsers);\r\n};\r\n\r\n// Update user profile\r\nexport const updateUserProfile = async (userId: string, name: string, email: string): Promise<User> => {\r\n  const currentUsers = loadUsers();\r\n  const user = currentUsers.find(u => u.id === userId);\r\n  \r\n  if (!user) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  // Check if email is already taken by another user\r\n  const emailExists = currentUsers.find(u => u.id !== userId && u.email.toLowerCase() === email.toLowerCase());\r\n  if (emailExists) {\r\n    throw new Error('Email is already taken by another user');\r\n  }\r\n\r\n  // Validate email format\r\n  if (!isValidEmail(email)) {\r\n    throw new Error('Invalid email format');\r\n  }\r\n\r\n  // Update user data\r\n  user.name = name;\r\n  user.email = email.toLowerCase();\r\n  \r\n  saveUsers(currentUsers);\r\n\r\n  // Return user without password\r\n  const { password: _, ...userWithoutPassword } = user;\r\n  return userWithoutPassword;\r\n};\r\n\r\n// Change user password\r\nexport const changeUserPassword = async (email: string, currentPassword: string, newPassword: string): Promise<void> => {\r\n  const currentUsers = loadUsers();\r\n  const user = currentUsers.find(u => u.email.toLowerCase() === email.toLowerCase());\r\n  \r\n  if (!user) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  // Verify current password\r\n  if (user.password !== currentPassword) {\r\n    throw new Error('Current password is incorrect');\r\n  }\r\n\r\n  // Validate new password\r\n  const passwordErrors = validatePassword(newPassword);\r\n  if (passwordErrors.length > 0) {\r\n    throw new Error(passwordErrors.join(', '));\r\n  }\r\n\r\n  // Update password\r\n  user.password = newPassword; // In real app, this would be hashed\r\n  saveUsers(currentUsers);\r\n};\r\n\r\n// Validation functions\r\nexport const validatePassword = (password: string): string[] => {\r\n  const errors: string[] = [];\r\n  \r\n  if (password.length < 8) {\r\n    errors.push('Password must be at least 8 characters long');\r\n  }\r\n  \r\n  if (!/[A-Z]/.test(password)) {\r\n    errors.push('Password must contain at least one uppercase letter');\r\n  }\r\n  \r\n  if (!/[a-z]/.test(password)) {\r\n    errors.push('Password must contain at least one lowercase letter');\r\n  }\r\n  \r\n  if (!/\\d/.test(password)) {\r\n    errors.push('Password must contain at least one number');\r\n  }\r\n  \r\n  if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n    errors.push('Password must contain at least one special character');\r\n  }\r\n  \r\n  return errors;\r\n};\r\n\r\nexport const isValidEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n// Get user by ID\r\nexport const getUserById = (userId: string): User | null => {\r\n  const currentUsers = loadUsers();\r\n  const user = currentUsers.find(u => u.id === userId);\r\n  \r\n  if (!user) return null;\r\n  \r\n  const { password: _, ...userWithoutPassword } = user;\r\n  return userWithoutPassword;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}