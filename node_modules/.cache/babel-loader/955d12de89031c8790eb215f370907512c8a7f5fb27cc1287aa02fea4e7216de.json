{"ast":null,"code":"// Email service for sending password reset emails\n// This uses EmailJS as a free email service\n// EmailJS configuration\n// Replace these with your actual EmailJS credentials\nconst EMAILJS_SERVICE_ID='service_2u8d39s';// e.g., 'service_abc123'\nconst EMAILJS_TEMPLATE_ID='template_zyxc7dj';// e.g., 'template_xyz789'\nconst EMAILJS_WELCOME_TEMPLATE_ID='template_dbfh5hx';// Replace with your welcome template ID\nconst EMAILJS_USER_ID='EN-JTkX7Rw0oDM-K_';// e.g., 'user_def456'\n// Generate a secure reset token\nexport const generateResetToken=()=>{const token=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);return token;};// Store reset tokens (in a real app, this would be in a database)\n// Using localStorage for persistence across page refreshes\nconst RESET_TOKENS_KEY='news_app_reset_tokens';// Get tokens from localStorage\nconst getResetTokens=()=>{try{const stored=localStorage.getItem(RESET_TOKENS_KEY);if(!stored)return new Map();const tokensArray=JSON.parse(stored);const tokens=new Map();// Convert string dates back to Date objects\nfor(const[key,value]of tokensArray){tokens.set(key,{email:value.email,expires:new Date(value.expires)});}return tokens;}catch(error){console.error('Error loading reset tokens:',error);return new Map();}};// Save tokens to localStorage\nconst saveResetTokensToStorage=tokens=>{try{// Convert to array for JSON serialization\nconst tokensArray=Array.from(tokens.entries());localStorage.setItem(RESET_TOKENS_KEY,JSON.stringify(tokensArray));}catch(error){console.error('Error saving reset tokens:',error);}};// Clean up expired tokens\nconst cleanupExpiredTokens=()=>{const tokens=getResetTokens();const now=new Date();let hasExpired=false;// Use Array.from to avoid iteration issues\nconst entries=Array.from(tokens.entries());for(const[token,data]of entries){if(now>data.expires){tokens.delete(token);hasExpired=true;}}if(hasExpired){saveResetTokensToStorage(tokens);}return tokens;};// Save reset token\nexport const saveResetToken=(email,token)=>{const expires=new Date();expires.setHours(expires.getHours()+1);// Token expires in 1 hour\nconst tokens=cleanupExpiredTokens();tokens.set(token,{email,expires});saveResetTokensToStorage(tokens);};// Validate reset token\nexport const validateResetToken=token=>{const tokens=cleanupExpiredTokens();const tokenData=tokens.get(token);if(!tokenData){return null;// Token not found\n}if(new Date()>tokenData.expires){tokens.delete(token);// Remove expired token\nsaveResetTokensToStorage(tokens);return null;// Token expired\n}return tokenData.email;};// Remove used token\nexport const removeResetToken=token=>{const tokens=getResetTokens();tokens.delete(token);saveResetTokensToStorage(tokens);};// Send password reset email using EmailJS\nexport const sendPasswordResetEmail=async(email,name)=>{try{// Generate reset token\nconst token=generateResetToken();saveResetToken(email,token);// Create reset link\nconst resetLink=`${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;// Email data\nconst emailData={to_email:email,to_name:name,reset_link:resetLink,from_name:'News App Team'};console.log('üîß EmailJS Configuration Check:');console.log('Service ID:',EMAILJS_SERVICE_ID);console.log('Template ID:',EMAILJS_TEMPLATE_ID);console.log('User ID:',EMAILJS_USER_ID);console.log('Email Data:',emailData);// Check if all credentials are properly configured\nconsole.log('üîç Checking credentials...');console.log('Service ID exists:',!!EMAILJS_SERVICE_ID);console.log('Template ID exists:',!!EMAILJS_TEMPLATE_ID);console.log('User ID exists:',!!EMAILJS_USER_ID);console.log('All credentials exist:',!!(EMAILJS_SERVICE_ID&&EMAILJS_TEMPLATE_ID&&EMAILJS_USER_ID));if(EMAILJS_SERVICE_ID&&EMAILJS_TEMPLATE_ID&&EMAILJS_USER_ID){console.log('‚úÖ All credentials found, attempting EmailJS...');try{console.log('üìß Attempting to send real email via EmailJS...');// Import EmailJS\nconst emailjs=await import('@emailjs/browser');// Initialize EmailJS with your user ID\nemailjs.default.init(EMAILJS_USER_ID);console.log('üìß EmailJS initialized successfully');console.log('üìß Sending email with data:',emailData);// Send the email\nconst result=await emailjs.default.send(EMAILJS_SERVICE_ID,EMAILJS_TEMPLATE_ID,emailData,EMAILJS_USER_ID);console.log('‚úÖ Email sent successfully:',result);return'Email sent successfully! Check your inbox for the password reset link.';}catch(emailError){console.error('‚ùå EmailJS error details:',emailError);console.error('‚ùå Error message:',emailError.message);console.error('‚ùå Error code:',emailError.code);console.error('‚ùå Error text:',emailError.text);// Check for specific EmailJS errors\nif(emailError.text){console.error('‚ùå EmailJS error text:',emailError.text);}console.warn('üìß Falling back to simulation due to EmailJS error');// Fall back to simulation\nreturn sendPasswordResetEmailSimple(email,name);}}else{console.log('‚ö†Ô∏è EmailJS not configured, using simulation');console.log('Missing credentials:');if(!EMAILJS_SERVICE_ID)console.log('- Service ID');if(!EMAILJS_TEMPLATE_ID)console.log('- Template ID');if(!EMAILJS_USER_ID)console.log('- User ID');// Fallback: Show the reset link in console for testing\nconsole.log('üìß Password Reset Email (Simulated)');console.log('To:',email);console.log('Reset Link:',resetLink);console.log('In a real app, this would be sent via email');// For testing purposes, you can copy this link\nalert(`For testing: Copy this reset link: ${resetLink}`);return'Reset link generated (check console for testing)';}}catch(error){console.error('Failed to send email:',error);throw new Error('Failed to send password reset email');}};// Alternative: Send email using a simple HTTP request to a backend\nexport const sendPasswordResetEmailSimple=async(email,name)=>{try{// Generate reset token\nconst token=generateResetToken();saveResetToken(email,token);// Create reset link\nconst resetLink=`${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;// In a real app, you would make an HTTP request to your backend\n// const response = await fetch('/api/send-reset-email', {\n//   method: 'POST',\n//   headers: { 'Content-Type': 'application/json' },\n//   body: JSON.stringify({ email, name, resetLink })\n// });\n// For now, simulate the email sending\nconsole.log('üìß Password Reset Email (Simulated)');console.log('To:',email);console.log('Reset Link:',resetLink);// Show the link for testing\nalert(`For testing: Copy this reset link: ${resetLink}`);return'Reset link generated successfully';}catch(error){console.error('Failed to send email:',error);throw new Error('Failed to send password reset email');}};// Send welcome email using EmailJS\nexport const sendWelcomeEmail=async(email,name)=>{try{// Create app URL\nconst appUrl=window.location.origin;// Email data\nconst emailData={to_email:email,to_name:name,app_url:appUrl,from_name:'News App Team'};console.log('üîß Welcome Email Configuration Check:');console.log('Service ID:',EMAILJS_SERVICE_ID);console.log('Welcome Template ID:',EMAILJS_WELCOME_TEMPLATE_ID);console.log('User ID:',EMAILJS_USER_ID);console.log('Welcome Email Data:',emailData);// Check if all credentials are properly configured\nconsole.log('üîç Checking welcome email credentials...');console.log('Service ID exists:',!!EMAILJS_SERVICE_ID);console.log('Welcome Template ID exists:',!!EMAILJS_WELCOME_TEMPLATE_ID);console.log('User ID exists:',!!EMAILJS_USER_ID);console.log('All welcome credentials exist:',!!(EMAILJS_SERVICE_ID&&EMAILJS_WELCOME_TEMPLATE_ID&&EMAILJS_USER_ID));if(EMAILJS_SERVICE_ID&&EMAILJS_WELCOME_TEMPLATE_ID&&EMAILJS_USER_ID){console.log('‚úÖ All welcome credentials found, attempting EmailJS...');try{console.log('üìß Attempting to send welcome email via EmailJS...');// Import EmailJS\nconst emailjs=await import('@emailjs/browser');// Initialize EmailJS with your user ID\nemailjs.default.init(EMAILJS_USER_ID);console.log('üìß EmailJS initialized successfully');console.log('üìß Sending welcome email with data:',emailData);// Send the welcome email\nconst result=await emailjs.default.send(EMAILJS_SERVICE_ID,EMAILJS_WELCOME_TEMPLATE_ID,emailData,EMAILJS_USER_ID);console.log('‚úÖ Welcome email sent successfully:',result);return'Welcome email sent successfully!';}catch(emailError){console.error('‚ùå Welcome EmailJS error details:',emailError);console.error('‚ùå Error message:',emailError.message);console.error('‚ùå Error code:',emailError.code);console.error('‚ùå Error text:',emailError.text);// Check for specific EmailJS errors\nif(emailError.text){console.error('‚ùå EmailJS error text:',emailError.text);}console.warn('üìß Welcome email failed, but registration continues');return'Welcome email failed, but registration successful';}}else{console.log('‚ö†Ô∏è Welcome email not configured, skipping welcome email');console.log('Missing welcome credentials:');if(!EMAILJS_SERVICE_ID)console.log('- Service ID');if(!EMAILJS_WELCOME_TEMPLATE_ID)console.log('- Welcome Template ID');if(!EMAILJS_USER_ID)console.log('- User ID');return'Registration successful (welcome email not configured)';}}catch(error){console.error('Failed to send welcome email:',error);return'Registration successful (welcome email failed)';}};","map":{"version":3,"names":["EMAILJS_SERVICE_ID","EMAILJS_TEMPLATE_ID","EMAILJS_WELCOME_TEMPLATE_ID","EMAILJS_USER_ID","generateResetToken","token","Math","random","toString","substring","RESET_TOKENS_KEY","getResetTokens","stored","localStorage","getItem","Map","tokensArray","JSON","parse","tokens","key","value","set","email","expires","Date","error","console","saveResetTokensToStorage","Array","from","entries","setItem","stringify","cleanupExpiredTokens","now","hasExpired","data","delete","saveResetToken","setHours","getHours","validateResetToken","tokenData","get","removeResetToken","sendPasswordResetEmail","name","resetLink","window","location","origin","encodeURIComponent","emailData","to_email","to_name","reset_link","from_name","log","emailjs","default","init","result","send","emailError","message","code","text","warn","sendPasswordResetEmailSimple","alert","Error","sendWelcomeEmail","appUrl","app_url"],"sources":["D:/Curser Projects/src/services/emailService.ts"],"sourcesContent":["// Email service for sending password reset emails\r\n// This uses EmailJS as a free email service\r\n\r\ninterface EmailData extends Record<string, unknown> {\r\n  to_email: string;\r\n  to_name: string;\r\n  reset_link: string;\r\n  from_name: string;\r\n}\r\n\r\ninterface WelcomeEmailData extends Record<string, unknown> {\r\n  to_email: string;\r\n  to_name: string;\r\n  app_url: string;\r\n  from_name: string;\r\n}\r\n\r\n// EmailJS configuration\r\n// Replace these with your actual EmailJS credentials\r\nconst EMAILJS_SERVICE_ID = 'service_2u8d39s'; // e.g., 'service_abc123'\r\nconst EMAILJS_TEMPLATE_ID = 'template_zyxc7dj'; // e.g., 'template_xyz789'\r\nconst EMAILJS_WELCOME_TEMPLATE_ID = 'template_dbfh5hx'; // Replace with your welcome template ID\r\nconst EMAILJS_USER_ID = 'EN-JTkX7Rw0oDM-K_'; // e.g., 'user_def456'\r\n\r\n// Generate a secure reset token\r\nexport const generateResetToken = (): string => {\r\n  const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n  return token;\r\n};\r\n\r\n// Store reset tokens (in a real app, this would be in a database)\r\n// Using localStorage for persistence across page refreshes\r\nconst RESET_TOKENS_KEY = 'news_app_reset_tokens';\r\n\r\n// Get tokens from localStorage\r\nconst getResetTokens = (): Map<string, { email: string; expires: Date }> => {\r\n  try {\r\n    const stored = localStorage.getItem(RESET_TOKENS_KEY);\r\n    if (!stored) return new Map();\r\n    \r\n    const tokensArray = JSON.parse(stored) as Array<[string, { email: string; expires: string }]>;\r\n    const tokens = new Map<string, { email: string; expires: Date }>();\r\n    \r\n    // Convert string dates back to Date objects\r\n    for (const [key, value] of tokensArray) {\r\n      tokens.set(key, {\r\n        email: value.email,\r\n        expires: new Date(value.expires)\r\n      });\r\n    }\r\n    return tokens;\r\n  } catch (error) {\r\n    console.error('Error loading reset tokens:', error);\r\n    return new Map();\r\n  }\r\n};\r\n\r\n// Save tokens to localStorage\r\nconst saveResetTokensToStorage = (tokens: Map<string, { email: string; expires: Date }>) => {\r\n  try {\r\n    // Convert to array for JSON serialization\r\n    const tokensArray = Array.from(tokens.entries());\r\n    localStorage.setItem(RESET_TOKENS_KEY, JSON.stringify(tokensArray));\r\n  } catch (error) {\r\n    console.error('Error saving reset tokens:', error);\r\n  }\r\n};\r\n\r\n// Clean up expired tokens\r\nconst cleanupExpiredTokens = () => {\r\n  const tokens = getResetTokens();\r\n  const now = new Date();\r\n  let hasExpired = false;\r\n  \r\n  // Use Array.from to avoid iteration issues\r\n  const entries = Array.from(tokens.entries());\r\n  for (const [token, data] of entries) {\r\n    if (now > data.expires) {\r\n      tokens.delete(token);\r\n      hasExpired = true;\r\n    }\r\n  }\r\n  \r\n  if (hasExpired) {\r\n    saveResetTokensToStorage(tokens);\r\n  }\r\n  \r\n  return tokens;\r\n};\r\n\r\n// Save reset token\r\nexport const saveResetToken = (email: string, token: string): void => {\r\n  const expires = new Date();\r\n  expires.setHours(expires.getHours() + 1); // Token expires in 1 hour\r\n  \r\n  const tokens = cleanupExpiredTokens();\r\n  tokens.set(token, { email, expires });\r\n  saveResetTokensToStorage(tokens);\r\n};\r\n\r\n// Validate reset token\r\nexport const validateResetToken = (token: string): string | null => {\r\n  const tokens = cleanupExpiredTokens();\r\n  const tokenData = tokens.get(token);\r\n  \r\n  if (!tokenData) {\r\n    return null; // Token not found\r\n  }\r\n  \r\n  if (new Date() > tokenData.expires) {\r\n    tokens.delete(token); // Remove expired token\r\n    saveResetTokensToStorage(tokens);\r\n    return null; // Token expired\r\n  }\r\n  \r\n  return tokenData.email;\r\n};\r\n\r\n// Remove used token\r\nexport const removeResetToken = (token: string): void => {\r\n  const tokens = getResetTokens();\r\n  tokens.delete(token);\r\n  saveResetTokensToStorage(tokens);\r\n};\r\n\r\n// Send password reset email using EmailJS\r\nexport const sendPasswordResetEmail = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Generate reset token\r\n    const token = generateResetToken();\r\n    saveResetToken(email, token);\r\n    \r\n    // Create reset link\r\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n    \r\n    // Email data\r\n    const emailData: EmailData = {\r\n      to_email: email,\r\n      to_name: name,\r\n      reset_link: resetLink,\r\n      from_name: 'News App Team'\r\n    };\r\n\r\n    console.log('üîß EmailJS Configuration Check:');\r\n    console.log('Service ID:', EMAILJS_SERVICE_ID);\r\n    console.log('Template ID:', EMAILJS_TEMPLATE_ID);\r\n    console.log('User ID:', EMAILJS_USER_ID);\r\n    console.log('Email Data:', emailData);\r\n\r\n    // Check if all credentials are properly configured\r\n    console.log('üîç Checking credentials...');\r\n    console.log('Service ID exists:', !!EMAILJS_SERVICE_ID);\r\n    console.log('Template ID exists:', !!EMAILJS_TEMPLATE_ID);\r\n    console.log('User ID exists:', !!EMAILJS_USER_ID);\r\n    console.log('All credentials exist:', !!(EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID));\r\n\r\n    if (EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID) {\r\n      console.log('‚úÖ All credentials found, attempting EmailJS...');\r\n      try {\r\n        console.log('üìß Attempting to send real email via EmailJS...');\r\n        \r\n        // Import EmailJS\r\n        const emailjs = await import('@emailjs/browser');\r\n        \r\n        // Initialize EmailJS with your user ID\r\n        emailjs.default.init(EMAILJS_USER_ID);\r\n        \r\n        console.log('üìß EmailJS initialized successfully');\r\n        console.log('üìß Sending email with data:', emailData);\r\n        \r\n        // Send the email\r\n        const result = await emailjs.default.send(\r\n          EMAILJS_SERVICE_ID,\r\n          EMAILJS_TEMPLATE_ID,\r\n          emailData,\r\n          EMAILJS_USER_ID\r\n        );\r\n        \r\n        console.log('‚úÖ Email sent successfully:', result);\r\n        return 'Email sent successfully! Check your inbox for the password reset link.';\r\n      } catch (emailError: any) {\r\n        console.error('‚ùå EmailJS error details:', emailError);\r\n        console.error('‚ùå Error message:', emailError.message);\r\n        console.error('‚ùå Error code:', emailError.code);\r\n        console.error('‚ùå Error text:', emailError.text);\r\n        \r\n        // Check for specific EmailJS errors\r\n        if (emailError.text) {\r\n          console.error('‚ùå EmailJS error text:', emailError.text);\r\n        }\r\n        \r\n        console.warn('üìß Falling back to simulation due to EmailJS error');\r\n        // Fall back to simulation\r\n        return sendPasswordResetEmailSimple(email, name);\r\n      }\r\n    } else {\r\n      console.log('‚ö†Ô∏è EmailJS not configured, using simulation');\r\n      console.log('Missing credentials:');\r\n      if (!EMAILJS_SERVICE_ID) console.log('- Service ID');\r\n      if (!EMAILJS_TEMPLATE_ID) console.log('- Template ID');\r\n      if (!EMAILJS_USER_ID) console.log('- User ID');\r\n      \r\n      // Fallback: Show the reset link in console for testing\r\n      console.log('üìß Password Reset Email (Simulated)');\r\n      console.log('To:', email);\r\n      console.log('Reset Link:', resetLink);\r\n      console.log('In a real app, this would be sent via email');\r\n      \r\n      // For testing purposes, you can copy this link\r\n      alert(`For testing: Copy this reset link: ${resetLink}`);\r\n      \r\n      return 'Reset link generated (check console for testing)';\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    throw new Error('Failed to send password reset email');\r\n  }\r\n};\r\n\r\n// Alternative: Send email using a simple HTTP request to a backend\r\nexport const sendPasswordResetEmailSimple = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Generate reset token\r\n    const token = generateResetToken();\r\n    saveResetToken(email, token);\r\n    \r\n    // Create reset link\r\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n    \r\n    // In a real app, you would make an HTTP request to your backend\r\n    // const response = await fetch('/api/send-reset-email', {\r\n    //   method: 'POST',\r\n    //   headers: { 'Content-Type': 'application/json' },\r\n    //   body: JSON.stringify({ email, name, resetLink })\r\n    // });\r\n    \r\n    // For now, simulate the email sending\r\n    console.log('üìß Password Reset Email (Simulated)');\r\n    console.log('To:', email);\r\n    console.log('Reset Link:', resetLink);\r\n    \r\n    // Show the link for testing\r\n    alert(`For testing: Copy this reset link: ${resetLink}`);\r\n    \r\n    return 'Reset link generated successfully';\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    throw new Error('Failed to send password reset email');\r\n  }\r\n}; \r\n\r\n// Send welcome email using EmailJS\r\nexport const sendWelcomeEmail = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Create app URL\r\n    const appUrl = window.location.origin;\r\n    \r\n    // Email data\r\n    const emailData: WelcomeEmailData = {\r\n      to_email: email,\r\n      to_name: name,\r\n      app_url: appUrl,\r\n      from_name: 'News App Team'\r\n    };\r\n\r\n    console.log('üîß Welcome Email Configuration Check:');\r\n    console.log('Service ID:', EMAILJS_SERVICE_ID);\r\n    console.log('Welcome Template ID:', EMAILJS_WELCOME_TEMPLATE_ID);\r\n    console.log('User ID:', EMAILJS_USER_ID);\r\n    console.log('Welcome Email Data:', emailData);\r\n\r\n    // Check if all credentials are properly configured\r\n    console.log('üîç Checking welcome email credentials...');\r\n    console.log('Service ID exists:', !!EMAILJS_SERVICE_ID);\r\n    console.log('Welcome Template ID exists:', !!EMAILJS_WELCOME_TEMPLATE_ID);\r\n    console.log('User ID exists:', !!EMAILJS_USER_ID);\r\n    console.log('All welcome credentials exist:', !!(EMAILJS_SERVICE_ID && EMAILJS_WELCOME_TEMPLATE_ID && EMAILJS_USER_ID));\r\n\r\n    if (EMAILJS_SERVICE_ID && EMAILJS_WELCOME_TEMPLATE_ID && EMAILJS_USER_ID) {\r\n      console.log('‚úÖ All welcome credentials found, attempting EmailJS...');\r\n      try {\r\n        console.log('üìß Attempting to send welcome email via EmailJS...');\r\n        \r\n        // Import EmailJS\r\n        const emailjs = await import('@emailjs/browser');\r\n        \r\n        // Initialize EmailJS with your user ID\r\n        emailjs.default.init(EMAILJS_USER_ID);\r\n        \r\n        console.log('üìß EmailJS initialized successfully');\r\n        console.log('üìß Sending welcome email with data:', emailData);\r\n        \r\n        // Send the welcome email\r\n        const result = await emailjs.default.send(\r\n          EMAILJS_SERVICE_ID,\r\n          EMAILJS_WELCOME_TEMPLATE_ID,\r\n          emailData,\r\n          EMAILJS_USER_ID\r\n        );\r\n        \r\n        console.log('‚úÖ Welcome email sent successfully:', result);\r\n        return 'Welcome email sent successfully!';\r\n      } catch (emailError: any) {\r\n        console.error('‚ùå Welcome EmailJS error details:', emailError);\r\n        console.error('‚ùå Error message:', emailError.message);\r\n        console.error('‚ùå Error code:', emailError.code);\r\n        console.error('‚ùå Error text:', emailError.text);\r\n        \r\n        // Check for specific EmailJS errors\r\n        if (emailError.text) {\r\n          console.error('‚ùå EmailJS error text:', emailError.text);\r\n        }\r\n        \r\n        console.warn('üìß Welcome email failed, but registration continues');\r\n        return 'Welcome email failed, but registration successful';\r\n      }\r\n    } else {\r\n      console.log('‚ö†Ô∏è Welcome email not configured, skipping welcome email');\r\n      console.log('Missing welcome credentials:');\r\n      if (!EMAILJS_SERVICE_ID) console.log('- Service ID');\r\n      if (!EMAILJS_WELCOME_TEMPLATE_ID) console.log('- Welcome Template ID');\r\n      if (!EMAILJS_USER_ID) console.log('- User ID');\r\n      \r\n      return 'Registration successful (welcome email not configured)';\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to send welcome email:', error);\r\n    return 'Registration successful (welcome email failed)';\r\n  }\r\n}; "],"mappings":"AAAA;AACA;AAgBA;AACA;AACA,KAAM,CAAAA,kBAAkB,CAAG,iBAAiB,CAAE;AAC9C,KAAM,CAAAC,mBAAmB,CAAG,kBAAkB,CAAE;AAChD,KAAM,CAAAC,2BAA2B,CAAG,kBAAkB,CAAE;AACxD,KAAM,CAAAC,eAAe,CAAG,mBAAmB,CAAE;AAE7C;AACA,MAAO,MAAM,CAAAC,kBAAkB,CAAGA,CAAA,GAAc,CAC9C,KAAM,CAAAC,KAAK,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,CAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,CACvG,MAAO,CAAAJ,KAAK,CACd,CAAC,CAED;AACA;AACA,KAAM,CAAAK,gBAAgB,CAAG,uBAAuB,CAEhD;AACA,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAqD,CAC1E,GAAI,CACF,KAAM,CAAAC,MAAM,CAAGC,YAAY,CAACC,OAAO,CAACJ,gBAAgB,CAAC,CACrD,GAAI,CAACE,MAAM,CAAE,MAAO,IAAI,CAAAG,GAAG,CAAC,CAAC,CAE7B,KAAM,CAAAC,WAAW,CAAGC,IAAI,CAACC,KAAK,CAACN,MAAM,CAAwD,CAC7F,KAAM,CAAAO,MAAM,CAAG,GAAI,CAAAJ,GAAG,CAA2C,CAAC,CAElE;AACA,IAAK,KAAM,CAACK,GAAG,CAAEC,KAAK,CAAC,EAAI,CAAAL,WAAW,CAAE,CACtCG,MAAM,CAACG,GAAG,CAACF,GAAG,CAAE,CACdG,KAAK,CAAEF,KAAK,CAACE,KAAK,CAClBC,OAAO,CAAE,GAAI,CAAAC,IAAI,CAACJ,KAAK,CAACG,OAAO,CACjC,CAAC,CAAC,CACJ,CACA,MAAO,CAAAL,MAAM,CACf,CAAE,MAAOO,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,IAAI,CAAAX,GAAG,CAAC,CAAC,CAClB,CACF,CAAC,CAED;AACA,KAAM,CAAAa,wBAAwB,CAAIT,MAAqD,EAAK,CAC1F,GAAI,CACF;AACA,KAAM,CAAAH,WAAW,CAAGa,KAAK,CAACC,IAAI,CAACX,MAAM,CAACY,OAAO,CAAC,CAAC,CAAC,CAChDlB,YAAY,CAACmB,OAAO,CAACtB,gBAAgB,CAAEO,IAAI,CAACgB,SAAS,CAACjB,WAAW,CAAC,CAAC,CACrE,CAAE,MAAOU,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CACpD,CACF,CAAC,CAED;AACA,KAAM,CAAAQ,oBAAoB,CAAGA,CAAA,GAAM,CACjC,KAAM,CAAAf,MAAM,CAAGR,cAAc,CAAC,CAAC,CAC/B,KAAM,CAAAwB,GAAG,CAAG,GAAI,CAAAV,IAAI,CAAC,CAAC,CACtB,GAAI,CAAAW,UAAU,CAAG,KAAK,CAEtB;AACA,KAAM,CAAAL,OAAO,CAAGF,KAAK,CAACC,IAAI,CAACX,MAAM,CAACY,OAAO,CAAC,CAAC,CAAC,CAC5C,IAAK,KAAM,CAAC1B,KAAK,CAAEgC,IAAI,CAAC,EAAI,CAAAN,OAAO,CAAE,CACnC,GAAII,GAAG,CAAGE,IAAI,CAACb,OAAO,CAAE,CACtBL,MAAM,CAACmB,MAAM,CAACjC,KAAK,CAAC,CACpB+B,UAAU,CAAG,IAAI,CACnB,CACF,CAEA,GAAIA,UAAU,CAAE,CACdR,wBAAwB,CAACT,MAAM,CAAC,CAClC,CAEA,MAAO,CAAAA,MAAM,CACf,CAAC,CAED;AACA,MAAO,MAAM,CAAAoB,cAAc,CAAGA,CAAChB,KAAa,CAAElB,KAAa,GAAW,CACpE,KAAM,CAAAmB,OAAO,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAC1BD,OAAO,CAACgB,QAAQ,CAAChB,OAAO,CAACiB,QAAQ,CAAC,CAAC,CAAG,CAAC,CAAC,CAAE;AAE1C,KAAM,CAAAtB,MAAM,CAAGe,oBAAoB,CAAC,CAAC,CACrCf,MAAM,CAACG,GAAG,CAACjB,KAAK,CAAE,CAAEkB,KAAK,CAAEC,OAAQ,CAAC,CAAC,CACrCI,wBAAwB,CAACT,MAAM,CAAC,CAClC,CAAC,CAED;AACA,MAAO,MAAM,CAAAuB,kBAAkB,CAAIrC,KAAa,EAAoB,CAClE,KAAM,CAAAc,MAAM,CAAGe,oBAAoB,CAAC,CAAC,CACrC,KAAM,CAAAS,SAAS,CAAGxB,MAAM,CAACyB,GAAG,CAACvC,KAAK,CAAC,CAEnC,GAAI,CAACsC,SAAS,CAAE,CACd,MAAO,KAAI,CAAE;AACf,CAEA,GAAI,GAAI,CAAAlB,IAAI,CAAC,CAAC,CAAGkB,SAAS,CAACnB,OAAO,CAAE,CAClCL,MAAM,CAACmB,MAAM,CAACjC,KAAK,CAAC,CAAE;AACtBuB,wBAAwB,CAACT,MAAM,CAAC,CAChC,MAAO,KAAI,CAAE;AACf,CAEA,MAAO,CAAAwB,SAAS,CAACpB,KAAK,CACxB,CAAC,CAED;AACA,MAAO,MAAM,CAAAsB,gBAAgB,CAAIxC,KAAa,EAAW,CACvD,KAAM,CAAAc,MAAM,CAAGR,cAAc,CAAC,CAAC,CAC/BQ,MAAM,CAACmB,MAAM,CAACjC,KAAK,CAAC,CACpBuB,wBAAwB,CAACT,MAAM,CAAC,CAClC,CAAC,CAED;AACA,MAAO,MAAM,CAAA2B,sBAAsB,CAAG,KAAAA,CAAOvB,KAAa,CAAEwB,IAAY,GAAsB,CAC5F,GAAI,CACF;AACA,KAAM,CAAA1C,KAAK,CAAGD,kBAAkB,CAAC,CAAC,CAClCmC,cAAc,CAAChB,KAAK,CAAElB,KAAK,CAAC,CAE5B;AACA,KAAM,CAAA2C,SAAS,CAAG,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,yBAAyB9C,KAAK,UAAU+C,kBAAkB,CAAC7B,KAAK,CAAC,EAAE,CAE9G;AACA,KAAM,CAAA8B,SAAoB,CAAG,CAC3BC,QAAQ,CAAE/B,KAAK,CACfgC,OAAO,CAAER,IAAI,CACbS,UAAU,CAAER,SAAS,CACrBS,SAAS,CAAE,eACb,CAAC,CAED9B,OAAO,CAAC+B,GAAG,CAAC,iCAAiC,CAAC,CAC9C/B,OAAO,CAAC+B,GAAG,CAAC,aAAa,CAAE1D,kBAAkB,CAAC,CAC9C2B,OAAO,CAAC+B,GAAG,CAAC,cAAc,CAAEzD,mBAAmB,CAAC,CAChD0B,OAAO,CAAC+B,GAAG,CAAC,UAAU,CAAEvD,eAAe,CAAC,CACxCwB,OAAO,CAAC+B,GAAG,CAAC,aAAa,CAAEL,SAAS,CAAC,CAErC;AACA1B,OAAO,CAAC+B,GAAG,CAAC,4BAA4B,CAAC,CACzC/B,OAAO,CAAC+B,GAAG,CAAC,oBAAoB,CAAE,CAAC,CAAC1D,kBAAkB,CAAC,CACvD2B,OAAO,CAAC+B,GAAG,CAAC,qBAAqB,CAAE,CAAC,CAACzD,mBAAmB,CAAC,CACzD0B,OAAO,CAAC+B,GAAG,CAAC,iBAAiB,CAAE,CAAC,CAACvD,eAAe,CAAC,CACjDwB,OAAO,CAAC+B,GAAG,CAAC,wBAAwB,CAAE,CAAC,EAAE1D,kBAAkB,EAAIC,mBAAmB,EAAIE,eAAe,CAAC,CAAC,CAEvG,GAAIH,kBAAkB,EAAIC,mBAAmB,EAAIE,eAAe,CAAE,CAChEwB,OAAO,CAAC+B,GAAG,CAAC,gDAAgD,CAAC,CAC7D,GAAI,CACF/B,OAAO,CAAC+B,GAAG,CAAC,iDAAiD,CAAC,CAE9D;AACA,KAAM,CAAAC,OAAO,CAAG,KAAM,OAAM,CAAC,kBAAkB,CAAC,CAEhD;AACAA,OAAO,CAACC,OAAO,CAACC,IAAI,CAAC1D,eAAe,CAAC,CAErCwB,OAAO,CAAC+B,GAAG,CAAC,qCAAqC,CAAC,CAClD/B,OAAO,CAAC+B,GAAG,CAAC,6BAA6B,CAAEL,SAAS,CAAC,CAErD;AACA,KAAM,CAAAS,MAAM,CAAG,KAAM,CAAAH,OAAO,CAACC,OAAO,CAACG,IAAI,CACvC/D,kBAAkB,CAClBC,mBAAmB,CACnBoD,SAAS,CACTlD,eACF,CAAC,CAEDwB,OAAO,CAAC+B,GAAG,CAAC,4BAA4B,CAAEI,MAAM,CAAC,CACjD,MAAO,wEAAwE,CACjF,CAAE,MAAOE,UAAe,CAAE,CACxBrC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEsC,UAAU,CAAC,CACrDrC,OAAO,CAACD,KAAK,CAAC,kBAAkB,CAAEsC,UAAU,CAACC,OAAO,CAAC,CACrDtC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEsC,UAAU,CAACE,IAAI,CAAC,CAC/CvC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEsC,UAAU,CAACG,IAAI,CAAC,CAE/C;AACA,GAAIH,UAAU,CAACG,IAAI,CAAE,CACnBxC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEsC,UAAU,CAACG,IAAI,CAAC,CACzD,CAEAxC,OAAO,CAACyC,IAAI,CAAC,oDAAoD,CAAC,CAClE;AACA,MAAO,CAAAC,4BAA4B,CAAC9C,KAAK,CAAEwB,IAAI,CAAC,CAClD,CACF,CAAC,IAAM,CACLpB,OAAO,CAAC+B,GAAG,CAAC,6CAA6C,CAAC,CAC1D/B,OAAO,CAAC+B,GAAG,CAAC,sBAAsB,CAAC,CACnC,GAAI,CAAC1D,kBAAkB,CAAE2B,OAAO,CAAC+B,GAAG,CAAC,cAAc,CAAC,CACpD,GAAI,CAACzD,mBAAmB,CAAE0B,OAAO,CAAC+B,GAAG,CAAC,eAAe,CAAC,CACtD,GAAI,CAACvD,eAAe,CAAEwB,OAAO,CAAC+B,GAAG,CAAC,WAAW,CAAC,CAE9C;AACA/B,OAAO,CAAC+B,GAAG,CAAC,qCAAqC,CAAC,CAClD/B,OAAO,CAAC+B,GAAG,CAAC,KAAK,CAAEnC,KAAK,CAAC,CACzBI,OAAO,CAAC+B,GAAG,CAAC,aAAa,CAAEV,SAAS,CAAC,CACrCrB,OAAO,CAAC+B,GAAG,CAAC,6CAA6C,CAAC,CAE1D;AACAY,KAAK,CAAC,sCAAsCtB,SAAS,EAAE,CAAC,CAExD,MAAO,kDAAkD,CAC3D,CACF,CAAE,MAAOtB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,IAAI,CAAA6C,KAAK,CAAC,qCAAqC,CAAC,CACxD,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAF,4BAA4B,CAAG,KAAAA,CAAO9C,KAAa,CAAEwB,IAAY,GAAsB,CAClG,GAAI,CACF;AACA,KAAM,CAAA1C,KAAK,CAAGD,kBAAkB,CAAC,CAAC,CAClCmC,cAAc,CAAChB,KAAK,CAAElB,KAAK,CAAC,CAE5B;AACA,KAAM,CAAA2C,SAAS,CAAG,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,yBAAyB9C,KAAK,UAAU+C,kBAAkB,CAAC7B,KAAK,CAAC,EAAE,CAE9G;AACA;AACA;AACA;AACA;AACA;AAEA;AACAI,OAAO,CAAC+B,GAAG,CAAC,qCAAqC,CAAC,CAClD/B,OAAO,CAAC+B,GAAG,CAAC,KAAK,CAAEnC,KAAK,CAAC,CACzBI,OAAO,CAAC+B,GAAG,CAAC,aAAa,CAAEV,SAAS,CAAC,CAErC;AACAsB,KAAK,CAAC,sCAAsCtB,SAAS,EAAE,CAAC,CAExD,MAAO,mCAAmC,CAC5C,CAAE,MAAOtB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,IAAI,CAAA6C,KAAK,CAAC,qCAAqC,CAAC,CACxD,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAG,KAAAA,CAAOjD,KAAa,CAAEwB,IAAY,GAAsB,CACtF,GAAI,CACF;AACA,KAAM,CAAA0B,MAAM,CAAGxB,MAAM,CAACC,QAAQ,CAACC,MAAM,CAErC;AACA,KAAM,CAAAE,SAA2B,CAAG,CAClCC,QAAQ,CAAE/B,KAAK,CACfgC,OAAO,CAAER,IAAI,CACb2B,OAAO,CAAED,MAAM,CACfhB,SAAS,CAAE,eACb,CAAC,CAED9B,OAAO,CAAC+B,GAAG,CAAC,uCAAuC,CAAC,CACpD/B,OAAO,CAAC+B,GAAG,CAAC,aAAa,CAAE1D,kBAAkB,CAAC,CAC9C2B,OAAO,CAAC+B,GAAG,CAAC,sBAAsB,CAAExD,2BAA2B,CAAC,CAChEyB,OAAO,CAAC+B,GAAG,CAAC,UAAU,CAAEvD,eAAe,CAAC,CACxCwB,OAAO,CAAC+B,GAAG,CAAC,qBAAqB,CAAEL,SAAS,CAAC,CAE7C;AACA1B,OAAO,CAAC+B,GAAG,CAAC,0CAA0C,CAAC,CACvD/B,OAAO,CAAC+B,GAAG,CAAC,oBAAoB,CAAE,CAAC,CAAC1D,kBAAkB,CAAC,CACvD2B,OAAO,CAAC+B,GAAG,CAAC,6BAA6B,CAAE,CAAC,CAACxD,2BAA2B,CAAC,CACzEyB,OAAO,CAAC+B,GAAG,CAAC,iBAAiB,CAAE,CAAC,CAACvD,eAAe,CAAC,CACjDwB,OAAO,CAAC+B,GAAG,CAAC,gCAAgC,CAAE,CAAC,EAAE1D,kBAAkB,EAAIE,2BAA2B,EAAIC,eAAe,CAAC,CAAC,CAEvH,GAAIH,kBAAkB,EAAIE,2BAA2B,EAAIC,eAAe,CAAE,CACxEwB,OAAO,CAAC+B,GAAG,CAAC,wDAAwD,CAAC,CACrE,GAAI,CACF/B,OAAO,CAAC+B,GAAG,CAAC,oDAAoD,CAAC,CAEjE;AACA,KAAM,CAAAC,OAAO,CAAG,KAAM,OAAM,CAAC,kBAAkB,CAAC,CAEhD;AACAA,OAAO,CAACC,OAAO,CAACC,IAAI,CAAC1D,eAAe,CAAC,CAErCwB,OAAO,CAAC+B,GAAG,CAAC,qCAAqC,CAAC,CAClD/B,OAAO,CAAC+B,GAAG,CAAC,qCAAqC,CAAEL,SAAS,CAAC,CAE7D;AACA,KAAM,CAAAS,MAAM,CAAG,KAAM,CAAAH,OAAO,CAACC,OAAO,CAACG,IAAI,CACvC/D,kBAAkB,CAClBE,2BAA2B,CAC3BmD,SAAS,CACTlD,eACF,CAAC,CAEDwB,OAAO,CAAC+B,GAAG,CAAC,oCAAoC,CAAEI,MAAM,CAAC,CACzD,MAAO,kCAAkC,CAC3C,CAAE,MAAOE,UAAe,CAAE,CACxBrC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEsC,UAAU,CAAC,CAC7DrC,OAAO,CAACD,KAAK,CAAC,kBAAkB,CAAEsC,UAAU,CAACC,OAAO,CAAC,CACrDtC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEsC,UAAU,CAACE,IAAI,CAAC,CAC/CvC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEsC,UAAU,CAACG,IAAI,CAAC,CAE/C;AACA,GAAIH,UAAU,CAACG,IAAI,CAAE,CACnBxC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEsC,UAAU,CAACG,IAAI,CAAC,CACzD,CAEAxC,OAAO,CAACyC,IAAI,CAAC,qDAAqD,CAAC,CACnE,MAAO,mDAAmD,CAC5D,CACF,CAAC,IAAM,CACLzC,OAAO,CAAC+B,GAAG,CAAC,yDAAyD,CAAC,CACtE/B,OAAO,CAAC+B,GAAG,CAAC,8BAA8B,CAAC,CAC3C,GAAI,CAAC1D,kBAAkB,CAAE2B,OAAO,CAAC+B,GAAG,CAAC,cAAc,CAAC,CACpD,GAAI,CAACxD,2BAA2B,CAAEyB,OAAO,CAAC+B,GAAG,CAAC,uBAAuB,CAAC,CACtE,GAAI,CAACvD,eAAe,CAAEwB,OAAO,CAAC+B,GAAG,CAAC,WAAW,CAAC,CAE9C,MAAO,wDAAwD,CACjE,CACF,CAAE,MAAOhC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,MAAO,gDAAgD,CACzD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}