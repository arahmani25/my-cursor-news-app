{"ast":null,"code":"// Email service for sending password reset emails\n// This uses EmailJS as a free email service\n\n// EmailJS configuration\n// Replace these with your actual EmailJS credentials\nconst EMAILJS_SERVICE_ID = 'service_2u8d39s'; // e.g., 'service_abc123'\nconst EMAILJS_TEMPLATE_ID = 'template_zyxc7dj'; // e.g., 'template_xyz789'\nconst EMAILJS_WELCOME_TEMPLATE_ID = 'template_dbfh5hx'; // Replace with your welcome template ID\nconst EMAILJS_USER_ID = 'EN-JTkX7Rw0oDM-K_'; // e.g., 'user_def456'\n\n// Generate a secure reset token\nexport const generateResetToken = () => {\n  const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  return token;\n};\n\n// Store reset tokens (in a real app, this would be in a database)\n// Using localStorage for persistence across page refreshes\nconst RESET_TOKENS_KEY = 'news_app_reset_tokens';\n\n// Get tokens from localStorage\nconst getResetTokens = () => {\n  try {\n    const stored = localStorage.getItem(RESET_TOKENS_KEY);\n    if (!stored) return new Map();\n    const tokensArray = JSON.parse(stored);\n    const tokens = new Map();\n\n    // Convert string dates back to Date objects\n    for (const [key, value] of tokensArray) {\n      tokens.set(key, {\n        email: value.email,\n        expires: new Date(value.expires)\n      });\n    }\n    return tokens;\n  } catch (error) {\n    console.error('Error loading reset tokens:', error);\n    return new Map();\n  }\n};\n\n// Save tokens to localStorage\nconst saveResetTokensToStorage = tokens => {\n  try {\n    // Convert to array for JSON serialization\n    const tokensArray = Array.from(tokens.entries());\n    localStorage.setItem(RESET_TOKENS_KEY, JSON.stringify(tokensArray));\n  } catch (error) {\n    console.error('Error saving reset tokens:', error);\n  }\n};\n\n// Clean up expired tokens\nconst cleanupExpiredTokens = () => {\n  const tokens = getResetTokens();\n  const now = new Date();\n  let hasExpired = false;\n\n  // Use Array.from to avoid iteration issues\n  const entries = Array.from(tokens.entries());\n  for (const [token, data] of entries) {\n    if (now > data.expires) {\n      tokens.delete(token);\n      hasExpired = true;\n    }\n  }\n  if (hasExpired) {\n    saveResetTokensToStorage(tokens);\n  }\n  return tokens;\n};\n\n// Save reset token\nexport const saveResetToken = (email, token) => {\n  const expires = new Date();\n  expires.setHours(expires.getHours() + 1); // Token expires in 1 hour\n\n  const tokens = cleanupExpiredTokens();\n  tokens.set(token, {\n    email,\n    expires\n  });\n  saveResetTokensToStorage(tokens);\n};\n\n// Validate reset token\nexport const validateResetToken = token => {\n  const tokens = cleanupExpiredTokens();\n  const tokenData = tokens.get(token);\n  if (!tokenData) {\n    return null; // Token not found\n  }\n  if (new Date() > tokenData.expires) {\n    tokens.delete(token); // Remove expired token\n    saveResetTokensToStorage(tokens);\n    return null; // Token expired\n  }\n  return tokenData.email;\n};\n\n// Remove used token\nexport const removeResetToken = token => {\n  const tokens = getResetTokens();\n  tokens.delete(token);\n  saveResetTokensToStorage(tokens);\n};\n\n// Send password reset email using EmailJS\nexport const sendPasswordResetEmail = async (email, name) => {\n  try {\n    // Generate reset token\n    const token = generateResetToken();\n    saveResetToken(email, token);\n\n    // Create reset link\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\n\n    // Email data\n    const emailData = {\n      to_email: email,\n      to_name: name,\n      reset_link: resetLink,\n      from_name: 'News App Team'\n    };\n    console.log('üîß EmailJS Configuration Check:');\n    console.log('Service ID:', EMAILJS_SERVICE_ID);\n    console.log('Template ID:', EMAILJS_TEMPLATE_ID);\n    console.log('User ID:', EMAILJS_USER_ID);\n    console.log('Email Data:', emailData);\n\n    // Check if all credentials are properly configured\n    console.log('üîç Checking credentials...');\n    console.log('Service ID exists:', !!EMAILJS_SERVICE_ID);\n    console.log('Template ID exists:', !!EMAILJS_TEMPLATE_ID);\n    console.log('User ID exists:', !!EMAILJS_USER_ID);\n    console.log('All credentials exist:', !!(EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID));\n    if (EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID) {\n      console.log('‚úÖ All credentials found, attempting EmailJS...');\n      try {\n        console.log('üìß Attempting to send real email via EmailJS...');\n\n        // Import EmailJS\n        const emailjs = await import('@emailjs/browser');\n\n        // Initialize EmailJS with your user ID\n        emailjs.default.init(EMAILJS_USER_ID);\n        console.log('üìß EmailJS initialized successfully');\n        console.log('üìß Sending email with data:', emailData);\n\n        // Send the email\n        const result = await emailjs.default.send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, emailData, EMAILJS_USER_ID);\n        console.log('‚úÖ Email sent successfully:', result);\n        return 'Email sent successfully! Check your inbox for the password reset link.';\n      } catch (emailError) {\n        console.error('‚ùå EmailJS error details:', emailError);\n        console.error('‚ùå Error message:', emailError.message);\n        console.error('‚ùå Error code:', emailError.code);\n        console.error('‚ùå Error text:', emailError.text);\n\n        // Check for specific EmailJS errors\n        if (emailError.text) {\n          console.error('‚ùå EmailJS error text:', emailError.text);\n        }\n        console.warn('üìß Falling back to simulation due to EmailJS error');\n        // Fall back to simulation\n        return sendPasswordResetEmailSimple(email, name);\n      }\n    } else {\n      console.log('‚ö†Ô∏è EmailJS not configured, using simulation');\n      console.log('Missing credentials:');\n      if (!EMAILJS_SERVICE_ID) console.log('- Service ID');\n      if (!EMAILJS_TEMPLATE_ID) console.log('- Template ID');\n      if (!EMAILJS_USER_ID) console.log('- User ID');\n\n      // Fallback: Show the reset link in console for testing\n      console.log('üìß Password Reset Email (Simulated)');\n      console.log('To:', email);\n      console.log('Reset Link:', resetLink);\n      console.log('In a real app, this would be sent via email');\n\n      // For testing purposes, you can copy this link\n      alert(`For testing: Copy this reset link: ${resetLink}`);\n      return 'Reset link generated (check console for testing)';\n    }\n  } catch (error) {\n    console.error('Failed to send email:', error);\n    throw new Error('Failed to send password reset email');\n  }\n};\n\n// Alternative: Send email using a simple HTTP request to a backend\nexport const sendPasswordResetEmailSimple = async (email, name) => {\n  try {\n    // Generate reset token\n    const token = generateResetToken();\n    saveResetToken(email, token);\n\n    // Create reset link\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\n\n    // In a real app, you would make an HTTP request to your backend\n    // const response = await fetch('/api/send-reset-email', {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify({ email, name, resetLink })\n    // });\n\n    // For now, simulate the email sending\n    console.log('üìß Password Reset Email (Simulated)');\n    console.log('To:', email);\n    console.log('Reset Link:', resetLink);\n\n    // Show the link for testing\n    alert(`For testing: Copy this reset link: ${resetLink}`);\n    return 'Reset link generated successfully';\n  } catch (error) {\n    console.error('Failed to send email:', error);\n    throw new Error('Failed to send password reset email');\n  }\n};\n\n// Send welcome email using EmailJS\nexport const sendWelcomeEmail = async (email, name) => {\n  try {\n    // Create app URL\n    const appUrl = window.location.origin;\n\n    // Email data\n    const emailData = {\n      to_email: email,\n      to_name: name,\n      app_url: appUrl,\n      from_name: 'News App Team'\n    };\n    console.log('üîß Welcome Email Configuration Check:');\n    console.log('Service ID:', EMAILJS_SERVICE_ID);\n    console.log('Welcome Template ID:', EMAILJS_WELCOME_TEMPLATE_ID);\n    console.log('User ID:', EMAILJS_USER_ID);\n    console.log('Welcome Email Data:', emailData);\n\n    // Check if all credentials are properly configured\n    console.log('üîç Checking welcome email credentials...');\n    console.log('Service ID exists:', !!EMAILJS_SERVICE_ID);\n    console.log('Welcome Template ID exists:', !!EMAILJS_WELCOME_TEMPLATE_ID);\n    console.log('User ID exists:', !!EMAILJS_USER_ID);\n    console.log('All welcome credentials exist:', !!(EMAILJS_SERVICE_ID && EMAILJS_WELCOME_TEMPLATE_ID && EMAILJS_USER_ID));\n    if (EMAILJS_SERVICE_ID && EMAILJS_WELCOME_TEMPLATE_ID && EMAILJS_USER_ID) {\n      console.log('‚úÖ All welcome credentials found, attempting EmailJS...');\n      try {\n        console.log('üìß Attempting to send welcome email via EmailJS...');\n\n        // Import EmailJS\n        const emailjs = await import('@emailjs/browser');\n\n        // Initialize EmailJS with your user ID\n        emailjs.default.init(EMAILJS_USER_ID);\n        console.log('üìß EmailJS initialized successfully');\n        console.log('üìß Sending welcome email with data:', emailData);\n\n        // Send the welcome email\n        const result = await emailjs.default.send(EMAILJS_SERVICE_ID, EMAILJS_WELCOME_TEMPLATE_ID, emailData, EMAILJS_USER_ID);\n        console.log('‚úÖ Welcome email sent successfully:', result);\n        return 'Welcome email sent successfully!';\n      } catch (emailError) {\n        console.error('‚ùå Welcome EmailJS error details:', emailError);\n        console.error('‚ùå Error message:', emailError.message);\n        console.error('‚ùå Error code:', emailError.code);\n        console.error('‚ùå Error text:', emailError.text);\n\n        // Check for specific EmailJS errors\n        if (emailError.text) {\n          console.error('‚ùå EmailJS error text:', emailError.text);\n        }\n        console.warn('üìß Welcome email failed, but registration continues');\n        return 'Welcome email failed, but registration successful';\n      }\n    } else {\n      console.log('‚ö†Ô∏è Welcome email not configured, skipping welcome email');\n      console.log('Missing welcome credentials:');\n      if (!EMAILJS_SERVICE_ID) console.log('- Service ID');\n      if (!EMAILJS_WELCOME_TEMPLATE_ID) console.log('- Welcome Template ID');\n      if (!EMAILJS_USER_ID) console.log('- User ID');\n      return 'Registration successful (welcome email not configured)';\n    }\n  } catch (error) {\n    console.error('Failed to send welcome email:', error);\n    return 'Registration successful (welcome email failed)';\n  }\n};","map":{"version":3,"names":["EMAILJS_SERVICE_ID","EMAILJS_TEMPLATE_ID","EMAILJS_WELCOME_TEMPLATE_ID","EMAILJS_USER_ID","generateResetToken","token","Math","random","toString","substring","RESET_TOKENS_KEY","getResetTokens","stored","localStorage","getItem","Map","tokensArray","JSON","parse","tokens","key","value","set","email","expires","Date","error","console","saveResetTokensToStorage","Array","from","entries","setItem","stringify","cleanupExpiredTokens","now","hasExpired","data","delete","saveResetToken","setHours","getHours","validateResetToken","tokenData","get","removeResetToken","sendPasswordResetEmail","name","resetLink","window","location","origin","encodeURIComponent","emailData","to_email","to_name","reset_link","from_name","log","emailjs","default","init","result","send","emailError","message","code","text","warn","sendPasswordResetEmailSimple","alert","Error","sendWelcomeEmail","appUrl","app_url"],"sources":["D:/Curser Projects/src/services/emailService.ts"],"sourcesContent":["// Email service for sending password reset emails\r\n// This uses EmailJS as a free email service\r\n\r\ninterface EmailData extends Record<string, unknown> {\r\n  to_email: string;\r\n  to_name: string;\r\n  reset_link: string;\r\n  from_name: string;\r\n}\r\n\r\ninterface WelcomeEmailData extends Record<string, unknown> {\r\n  to_email: string;\r\n  to_name: string;\r\n  app_url: string;\r\n  from_name: string;\r\n}\r\n\r\n// EmailJS configuration\r\n// Replace these with your actual EmailJS credentials\r\nconst EMAILJS_SERVICE_ID = 'service_2u8d39s'; // e.g., 'service_abc123'\r\nconst EMAILJS_TEMPLATE_ID = 'template_zyxc7dj'; // e.g., 'template_xyz789'\r\nconst EMAILJS_WELCOME_TEMPLATE_ID = 'template_dbfh5hx'; // Replace with your welcome template ID\r\nconst EMAILJS_USER_ID = 'EN-JTkX7Rw0oDM-K_'; // e.g., 'user_def456'\r\n\r\n// Generate a secure reset token\r\nexport const generateResetToken = (): string => {\r\n  const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n  return token;\r\n};\r\n\r\n// Store reset tokens (in a real app, this would be in a database)\r\n// Using localStorage for persistence across page refreshes\r\nconst RESET_TOKENS_KEY = 'news_app_reset_tokens';\r\n\r\n// Get tokens from localStorage\r\nconst getResetTokens = (): Map<string, { email: string; expires: Date }> => {\r\n  try {\r\n    const stored = localStorage.getItem(RESET_TOKENS_KEY);\r\n    if (!stored) return new Map();\r\n    \r\n    const tokensArray = JSON.parse(stored) as Array<[string, { email: string; expires: string }]>;\r\n    const tokens = new Map<string, { email: string; expires: Date }>();\r\n    \r\n    // Convert string dates back to Date objects\r\n    for (const [key, value] of tokensArray) {\r\n      tokens.set(key, {\r\n        email: value.email,\r\n        expires: new Date(value.expires)\r\n      });\r\n    }\r\n    return tokens;\r\n  } catch (error) {\r\n    console.error('Error loading reset tokens:', error);\r\n    return new Map();\r\n  }\r\n};\r\n\r\n// Save tokens to localStorage\r\nconst saveResetTokensToStorage = (tokens: Map<string, { email: string; expires: Date }>) => {\r\n  try {\r\n    // Convert to array for JSON serialization\r\n    const tokensArray = Array.from(tokens.entries());\r\n    localStorage.setItem(RESET_TOKENS_KEY, JSON.stringify(tokensArray));\r\n  } catch (error) {\r\n    console.error('Error saving reset tokens:', error);\r\n  }\r\n};\r\n\r\n// Clean up expired tokens\r\nconst cleanupExpiredTokens = () => {\r\n  const tokens = getResetTokens();\r\n  const now = new Date();\r\n  let hasExpired = false;\r\n  \r\n  // Use Array.from to avoid iteration issues\r\n  const entries = Array.from(tokens.entries());\r\n  for (const [token, data] of entries) {\r\n    if (now > data.expires) {\r\n      tokens.delete(token);\r\n      hasExpired = true;\r\n    }\r\n  }\r\n  \r\n  if (hasExpired) {\r\n    saveResetTokensToStorage(tokens);\r\n  }\r\n  \r\n  return tokens;\r\n};\r\n\r\n// Save reset token\r\nexport const saveResetToken = (email: string, token: string): void => {\r\n  const expires = new Date();\r\n  expires.setHours(expires.getHours() + 1); // Token expires in 1 hour\r\n  \r\n  const tokens = cleanupExpiredTokens();\r\n  tokens.set(token, { email, expires });\r\n  saveResetTokensToStorage(tokens);\r\n};\r\n\r\n// Validate reset token\r\nexport const validateResetToken = (token: string): string | null => {\r\n  const tokens = cleanupExpiredTokens();\r\n  const tokenData = tokens.get(token);\r\n  \r\n  if (!tokenData) {\r\n    return null; // Token not found\r\n  }\r\n  \r\n  if (new Date() > tokenData.expires) {\r\n    tokens.delete(token); // Remove expired token\r\n    saveResetTokensToStorage(tokens);\r\n    return null; // Token expired\r\n  }\r\n  \r\n  return tokenData.email;\r\n};\r\n\r\n// Remove used token\r\nexport const removeResetToken = (token: string): void => {\r\n  const tokens = getResetTokens();\r\n  tokens.delete(token);\r\n  saveResetTokensToStorage(tokens);\r\n};\r\n\r\n// Send password reset email using EmailJS\r\nexport const sendPasswordResetEmail = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Generate reset token\r\n    const token = generateResetToken();\r\n    saveResetToken(email, token);\r\n    \r\n    // Create reset link\r\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n    \r\n    // Email data\r\n    const emailData: EmailData = {\r\n      to_email: email,\r\n      to_name: name,\r\n      reset_link: resetLink,\r\n      from_name: 'News App Team'\r\n    };\r\n\r\n    console.log('üîß EmailJS Configuration Check:');\r\n    console.log('Service ID:', EMAILJS_SERVICE_ID);\r\n    console.log('Template ID:', EMAILJS_TEMPLATE_ID);\r\n    console.log('User ID:', EMAILJS_USER_ID);\r\n    console.log('Email Data:', emailData);\r\n\r\n    // Check if all credentials are properly configured\r\n    console.log('üîç Checking credentials...');\r\n    console.log('Service ID exists:', !!EMAILJS_SERVICE_ID);\r\n    console.log('Template ID exists:', !!EMAILJS_TEMPLATE_ID);\r\n    console.log('User ID exists:', !!EMAILJS_USER_ID);\r\n    console.log('All credentials exist:', !!(EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID));\r\n\r\n    if (EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID) {\r\n      console.log('‚úÖ All credentials found, attempting EmailJS...');\r\n      try {\r\n        console.log('üìß Attempting to send real email via EmailJS...');\r\n        \r\n        // Import EmailJS\r\n        const emailjs = await import('@emailjs/browser');\r\n        \r\n        // Initialize EmailJS with your user ID\r\n        emailjs.default.init(EMAILJS_USER_ID);\r\n        \r\n        console.log('üìß EmailJS initialized successfully');\r\n        console.log('üìß Sending email with data:', emailData);\r\n        \r\n        // Send the email\r\n        const result = await emailjs.default.send(\r\n          EMAILJS_SERVICE_ID,\r\n          EMAILJS_TEMPLATE_ID,\r\n          emailData,\r\n          EMAILJS_USER_ID\r\n        );\r\n        \r\n        console.log('‚úÖ Email sent successfully:', result);\r\n        return 'Email sent successfully! Check your inbox for the password reset link.';\r\n      } catch (emailError: any) {\r\n        console.error('‚ùå EmailJS error details:', emailError);\r\n        console.error('‚ùå Error message:', emailError.message);\r\n        console.error('‚ùå Error code:', emailError.code);\r\n        console.error('‚ùå Error text:', emailError.text);\r\n        \r\n        // Check for specific EmailJS errors\r\n        if (emailError.text) {\r\n          console.error('‚ùå EmailJS error text:', emailError.text);\r\n        }\r\n        \r\n        console.warn('üìß Falling back to simulation due to EmailJS error');\r\n        // Fall back to simulation\r\n        return sendPasswordResetEmailSimple(email, name);\r\n      }\r\n    } else {\r\n      console.log('‚ö†Ô∏è EmailJS not configured, using simulation');\r\n      console.log('Missing credentials:');\r\n      if (!EMAILJS_SERVICE_ID) console.log('- Service ID');\r\n      if (!EMAILJS_TEMPLATE_ID) console.log('- Template ID');\r\n      if (!EMAILJS_USER_ID) console.log('- User ID');\r\n      \r\n      // Fallback: Show the reset link in console for testing\r\n      console.log('üìß Password Reset Email (Simulated)');\r\n      console.log('To:', email);\r\n      console.log('Reset Link:', resetLink);\r\n      console.log('In a real app, this would be sent via email');\r\n      \r\n      // For testing purposes, you can copy this link\r\n      alert(`For testing: Copy this reset link: ${resetLink}`);\r\n      \r\n      return 'Reset link generated (check console for testing)';\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    throw new Error('Failed to send password reset email');\r\n  }\r\n};\r\n\r\n// Alternative: Send email using a simple HTTP request to a backend\r\nexport const sendPasswordResetEmailSimple = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Generate reset token\r\n    const token = generateResetToken();\r\n    saveResetToken(email, token);\r\n    \r\n    // Create reset link\r\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n    \r\n    // In a real app, you would make an HTTP request to your backend\r\n    // const response = await fetch('/api/send-reset-email', {\r\n    //   method: 'POST',\r\n    //   headers: { 'Content-Type': 'application/json' },\r\n    //   body: JSON.stringify({ email, name, resetLink })\r\n    // });\r\n    \r\n    // For now, simulate the email sending\r\n    console.log('üìß Password Reset Email (Simulated)');\r\n    console.log('To:', email);\r\n    console.log('Reset Link:', resetLink);\r\n    \r\n    // Show the link for testing\r\n    alert(`For testing: Copy this reset link: ${resetLink}`);\r\n    \r\n    return 'Reset link generated successfully';\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    throw new Error('Failed to send password reset email');\r\n  }\r\n}; \r\n\r\n// Send welcome email using EmailJS\r\nexport const sendWelcomeEmail = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Create app URL\r\n    const appUrl = window.location.origin;\r\n    \r\n    // Email data\r\n    const emailData: WelcomeEmailData = {\r\n      to_email: email,\r\n      to_name: name,\r\n      app_url: appUrl,\r\n      from_name: 'News App Team'\r\n    };\r\n\r\n    console.log('üîß Welcome Email Configuration Check:');\r\n    console.log('Service ID:', EMAILJS_SERVICE_ID);\r\n    console.log('Welcome Template ID:', EMAILJS_WELCOME_TEMPLATE_ID);\r\n    console.log('User ID:', EMAILJS_USER_ID);\r\n    console.log('Welcome Email Data:', emailData);\r\n\r\n    // Check if all credentials are properly configured\r\n    console.log('üîç Checking welcome email credentials...');\r\n    console.log('Service ID exists:', !!EMAILJS_SERVICE_ID);\r\n    console.log('Welcome Template ID exists:', !!EMAILJS_WELCOME_TEMPLATE_ID);\r\n    console.log('User ID exists:', !!EMAILJS_USER_ID);\r\n    console.log('All welcome credentials exist:', !!(EMAILJS_SERVICE_ID && EMAILJS_WELCOME_TEMPLATE_ID && EMAILJS_USER_ID));\r\n\r\n    if (EMAILJS_SERVICE_ID && EMAILJS_WELCOME_TEMPLATE_ID && EMAILJS_USER_ID) {\r\n      console.log('‚úÖ All welcome credentials found, attempting EmailJS...');\r\n      try {\r\n        console.log('üìß Attempting to send welcome email via EmailJS...');\r\n        \r\n        // Import EmailJS\r\n        const emailjs = await import('@emailjs/browser');\r\n        \r\n        // Initialize EmailJS with your user ID\r\n        emailjs.default.init(EMAILJS_USER_ID);\r\n        \r\n        console.log('üìß EmailJS initialized successfully');\r\n        console.log('üìß Sending welcome email with data:', emailData);\r\n        \r\n        // Send the welcome email\r\n        const result = await emailjs.default.send(\r\n          EMAILJS_SERVICE_ID,\r\n          EMAILJS_WELCOME_TEMPLATE_ID,\r\n          emailData,\r\n          EMAILJS_USER_ID\r\n        );\r\n        \r\n        console.log('‚úÖ Welcome email sent successfully:', result);\r\n        return 'Welcome email sent successfully!';\r\n      } catch (emailError: any) {\r\n        console.error('‚ùå Welcome EmailJS error details:', emailError);\r\n        console.error('‚ùå Error message:', emailError.message);\r\n        console.error('‚ùå Error code:', emailError.code);\r\n        console.error('‚ùå Error text:', emailError.text);\r\n        \r\n        // Check for specific EmailJS errors\r\n        if (emailError.text) {\r\n          console.error('‚ùå EmailJS error text:', emailError.text);\r\n        }\r\n        \r\n        console.warn('üìß Welcome email failed, but registration continues');\r\n        return 'Welcome email failed, but registration successful';\r\n      }\r\n    } else {\r\n      console.log('‚ö†Ô∏è Welcome email not configured, skipping welcome email');\r\n      console.log('Missing welcome credentials:');\r\n      if (!EMAILJS_SERVICE_ID) console.log('- Service ID');\r\n      if (!EMAILJS_WELCOME_TEMPLATE_ID) console.log('- Welcome Template ID');\r\n      if (!EMAILJS_USER_ID) console.log('- User ID');\r\n      \r\n      return 'Registration successful (welcome email not configured)';\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to send welcome email:', error);\r\n    return 'Registration successful (welcome email failed)';\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}