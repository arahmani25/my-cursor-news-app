{"ast":null,"code":"// Email service for sending password reset emails\n// This uses EmailJS as a free email service\n\n// EmailJS configuration\nconst EMAILJS_SERVICE_ID = 'YOUR_EMAILJS_SERVICE_ID'; // Replace with your EmailJS service ID\nconst EMAILJS_TEMPLATE_ID = 'YOUR_EMAILJS_TEMPLATE_ID'; // Replace with your EmailJS template ID\nconst EMAILJS_USER_ID = 'YOUR_EMAILJS_USER_ID'; // Replace with your EmailJS user ID\n\n// Generate a secure reset token\nexport const generateResetToken = () => {\n  const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  return token;\n};\n\n// Store reset tokens (in a real app, this would be in a database)\nconst resetTokens = new Map();\n\n// Save reset token\nexport const saveResetToken = (email, token) => {\n  const expires = new Date();\n  expires.setHours(expires.getHours() + 1); // Token expires in 1 hour\n\n  resetTokens.set(token, {\n    email,\n    expires\n  });\n};\n\n// Validate reset token\nexport const validateResetToken = token => {\n  const tokenData = resetTokens.get(token);\n  if (!tokenData) {\n    return null; // Token not found\n  }\n  if (new Date() > tokenData.expires) {\n    resetTokens.delete(token); // Remove expired token\n    return null; // Token expired\n  }\n  return tokenData.email;\n};\n\n// Remove used token\nexport const removeResetToken = token => {\n  resetTokens.delete(token);\n};\n\n// Send password reset email using EmailJS\nexport const sendPasswordResetEmail = async (email, name) => {\n  try {\n    // Generate reset token\n    const token = generateResetToken();\n    saveResetToken(email, token);\n\n    // Create reset link\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\n\n    // Email data\n    const emailData = {\n      to_email: email,\n      to_name: name,\n      reset_link: resetLink,\n      from_name: 'News App Team'\n    };\n\n    // If EmailJS is configured, send real email\n    if (EMAILJS_SERVICE_ID !== 'YOUR_EMAILJS_SERVICE_ID') {\n      try {\n        // Try to import EmailJS\n        const emailjs = await import('@emailjs/browser');\n        await emailjs.default.send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, emailData, EMAILJS_USER_ID);\n        return 'Email sent successfully';\n      } catch (importError) {\n        console.warn('EmailJS not available, falling back to simulation:', importError);\n        // Fall back to simulation\n        return sendPasswordResetEmailSimple(email, name);\n      }\n    } else {\n      // Fallback: Show the reset link in console for testing\n      console.log('ðŸ“§ Password Reset Email (Simulated)');\n      console.log('To:', email);\n      console.log('Reset Link:', resetLink);\n      console.log('In a real app, this would be sent via email');\n\n      // For testing purposes, you can copy this link\n      alert(`For testing: Copy this reset link: ${resetLink}`);\n      return 'Reset link generated (check console for testing)';\n    }\n  } catch (error) {\n    console.error('Failed to send email:', error);\n    throw new Error('Failed to send password reset email');\n  }\n};\n\n// Alternative: Send email using a simple HTTP request to a backend\nexport const sendPasswordResetEmailSimple = async (email, name) => {\n  try {\n    // Generate reset token\n    const token = generateResetToken();\n    saveResetToken(email, token);\n\n    // Create reset link\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\n\n    // In a real app, you would make an HTTP request to your backend\n    // const response = await fetch('/api/send-reset-email', {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify({ email, name, resetLink })\n    // });\n\n    // For now, simulate the email sending\n    console.log('ðŸ“§ Password Reset Email (Simulated)');\n    console.log('To:', email);\n    console.log('Reset Link:', resetLink);\n\n    // Show the link for testing\n    alert(`For testing: Copy this reset link: ${resetLink}`);\n    return 'Reset link generated successfully';\n  } catch (error) {\n    console.error('Failed to send email:', error);\n    throw new Error('Failed to send password reset email');\n  }\n};","map":{"version":3,"names":["EMAILJS_SERVICE_ID","EMAILJS_TEMPLATE_ID","EMAILJS_USER_ID","generateResetToken","token","Math","random","toString","substring","resetTokens","Map","saveResetToken","email","expires","Date","setHours","getHours","set","validateResetToken","tokenData","get","delete","removeResetToken","sendPasswordResetEmail","name","resetLink","window","location","origin","encodeURIComponent","emailData","to_email","to_name","reset_link","from_name","emailjs","default","send","importError","console","warn","sendPasswordResetEmailSimple","log","alert","error","Error"],"sources":["D:/Curser Projects/src/services/emailService.ts"],"sourcesContent":["// Email service for sending password reset emails\r\n// This uses EmailJS as a free email service\r\n\r\ninterface EmailData {\r\n  to_email: string;\r\n  to_name: string;\r\n  reset_link: string;\r\n  from_name: string;\r\n}\r\n\r\n// EmailJS configuration\r\nconst EMAILJS_SERVICE_ID = 'YOUR_EMAILJS_SERVICE_ID'; // Replace with your EmailJS service ID\r\nconst EMAILJS_TEMPLATE_ID = 'YOUR_EMAILJS_TEMPLATE_ID'; // Replace with your EmailJS template ID\r\nconst EMAILJS_USER_ID = 'YOUR_EMAILJS_USER_ID'; // Replace with your EmailJS user ID\r\n\r\n// Generate a secure reset token\r\nexport const generateResetToken = (): string => {\r\n  const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n  return token;\r\n};\r\n\r\n// Store reset tokens (in a real app, this would be in a database)\r\nconst resetTokens = new Map<string, { email: string; expires: Date }>();\r\n\r\n// Save reset token\r\nexport const saveResetToken = (email: string, token: string): void => {\r\n  const expires = new Date();\r\n  expires.setHours(expires.getHours() + 1); // Token expires in 1 hour\r\n  \r\n  resetTokens.set(token, { email, expires });\r\n};\r\n\r\n// Validate reset token\r\nexport const validateResetToken = (token: string): string | null => {\r\n  const tokenData = resetTokens.get(token);\r\n  \r\n  if (!tokenData) {\r\n    return null; // Token not found\r\n  }\r\n  \r\n  if (new Date() > tokenData.expires) {\r\n    resetTokens.delete(token); // Remove expired token\r\n    return null; // Token expired\r\n  }\r\n  \r\n  return tokenData.email;\r\n};\r\n\r\n// Remove used token\r\nexport const removeResetToken = (token: string): void => {\r\n  resetTokens.delete(token);\r\n};\r\n\r\n// Send password reset email using EmailJS\r\nexport const sendPasswordResetEmail = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Generate reset token\r\n    const token = generateResetToken();\r\n    saveResetToken(email, token);\r\n    \r\n    // Create reset link\r\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n    \r\n    // Email data\r\n    const emailData: EmailData = {\r\n      to_email: email,\r\n      to_name: name,\r\n      reset_link: resetLink,\r\n      from_name: 'News App Team'\r\n    };\r\n\r\n    // If EmailJS is configured, send real email\r\n    if (EMAILJS_SERVICE_ID !== 'YOUR_EMAILJS_SERVICE_ID') {\r\n      try {\r\n        // Try to import EmailJS\r\n        const emailjs = await import('@emailjs/browser');\r\n        \r\n        await emailjs.default.send(\r\n          EMAILJS_SERVICE_ID,\r\n          EMAILJS_TEMPLATE_ID,\r\n          emailData,\r\n          EMAILJS_USER_ID\r\n        );\r\n        \r\n        return 'Email sent successfully';\r\n      } catch (importError) {\r\n        console.warn('EmailJS not available, falling back to simulation:', importError);\r\n        // Fall back to simulation\r\n        return sendPasswordResetEmailSimple(email, name);\r\n      }\r\n    } else {\r\n      // Fallback: Show the reset link in console for testing\r\n      console.log('ðŸ“§ Password Reset Email (Simulated)');\r\n      console.log('To:', email);\r\n      console.log('Reset Link:', resetLink);\r\n      console.log('In a real app, this would be sent via email');\r\n      \r\n      // For testing purposes, you can copy this link\r\n      alert(`For testing: Copy this reset link: ${resetLink}`);\r\n      \r\n      return 'Reset link generated (check console for testing)';\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    throw new Error('Failed to send password reset email');\r\n  }\r\n};\r\n\r\n// Alternative: Send email using a simple HTTP request to a backend\r\nexport const sendPasswordResetEmailSimple = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Generate reset token\r\n    const token = generateResetToken();\r\n    saveResetToken(email, token);\r\n    \r\n    // Create reset link\r\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n    \r\n    // In a real app, you would make an HTTP request to your backend\r\n    // const response = await fetch('/api/send-reset-email', {\r\n    //   method: 'POST',\r\n    //   headers: { 'Content-Type': 'application/json' },\r\n    //   body: JSON.stringify({ email, name, resetLink })\r\n    // });\r\n    \r\n    // For now, simulate the email sending\r\n    console.log('ðŸ“§ Password Reset Email (Simulated)');\r\n    console.log('To:', email);\r\n    console.log('Reset Link:', resetLink);\r\n    \r\n    // Show the link for testing\r\n    alert(`For testing: Copy this reset link: ${resetLink}`);\r\n    \r\n    return 'Reset link generated successfully';\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    throw new Error('Failed to send password reset email');\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}