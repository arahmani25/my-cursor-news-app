{"ast":null,"code":"// Email service for sending password reset emails\n// This uses EmailJS as a free email service\n\n// EmailJS configuration\n// Replace these with your actual EmailJS credentials\nconst EMAILJS_SERVICE_ID = 'service_2u8d39s'; // e.g., 'service_abc123'\nconst EMAILJS_TEMPLATE_ID = 'template_zyxc7dj'; // e.g., 'template_xyz789'\nconst EMAILJS_USER_ID = 'EN-JTkX7Rw0oDM-K_'; // e.g., 'user_def456'\n\n// Generate a secure reset token\nexport const generateResetToken = () => {\n  const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  return token;\n};\n\n// Store reset tokens (in a real app, this would be in a database)\nconst resetTokens = new Map();\n\n// Save reset token\nexport const saveResetToken = (email, token) => {\n  const expires = new Date();\n  expires.setHours(expires.getHours() + 1); // Token expires in 1 hour\n\n  resetTokens.set(token, {\n    email,\n    expires\n  });\n};\n\n// Validate reset token\nexport const validateResetToken = token => {\n  const tokenData = resetTokens.get(token);\n  if (!tokenData) {\n    return null; // Token not found\n  }\n  if (new Date() > tokenData.expires) {\n    resetTokens.delete(token); // Remove expired token\n    return null; // Token expired\n  }\n  return tokenData.email;\n};\n\n// Remove used token\nexport const removeResetToken = token => {\n  resetTokens.delete(token);\n};\n\n// Send password reset email using EmailJS\nexport const sendPasswordResetEmail = async (email, name) => {\n  try {\n    // Generate reset token\n    const token = generateResetToken();\n    saveResetToken(email, token);\n\n    // Create reset link\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\n\n    // Email data\n    const emailData = {\n      to_email: email,\n      to_name: name,\n      reset_link: resetLink,\n      from_name: 'News App Team'\n    };\n    console.log('üîß EmailJS Configuration Check:');\n    console.log('Service ID:', EMAILJS_SERVICE_ID);\n    console.log('Template ID:', EMAILJS_TEMPLATE_ID);\n    console.log('User ID:', EMAILJS_USER_ID);\n    console.log('Email Data:', emailData);\n\n    // Check if all credentials are properly configured\n    console.log('üîç Checking credentials...');\n    console.log('Service ID exists:', !!EMAILJS_SERVICE_ID);\n    console.log('Template ID exists:', !!EMAILJS_TEMPLATE_ID);\n    console.log('User ID exists:', !!EMAILJS_USER_ID);\n    console.log('All credentials exist:', !!(EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID));\n    if (EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID) {\n      console.log('‚úÖ All credentials found, attempting EmailJS...');\n      try {\n        console.log('üìß Attempting to send real email via EmailJS...');\n\n        // Import EmailJS\n        const emailjs = await import('@emailjs/browser');\n\n        // Initialize EmailJS with your user ID\n        emailjs.default.init(EMAILJS_USER_ID);\n        console.log('üìß EmailJS initialized successfully');\n        console.log('üìß Sending email with data:', emailData);\n\n        // Send the email\n        const result = await emailjs.default.send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, emailData, EMAILJS_USER_ID);\n        console.log('‚úÖ Email sent successfully:', result);\n        return 'Email sent successfully! Check your inbox for the password reset link.';\n      } catch (emailError) {\n        console.error('‚ùå EmailJS error details:', emailError);\n        console.error('‚ùå Error message:', emailError.message);\n        console.error('‚ùå Error code:', emailError.code);\n        console.error('‚ùå Error text:', emailError.text);\n\n        // Check for specific EmailJS errors\n        if (emailError.text) {\n          console.error('‚ùå EmailJS error text:', emailError.text);\n        }\n        console.warn('üìß Falling back to simulation due to EmailJS error');\n        // Fall back to simulation\n        return sendPasswordResetEmailSimple(email, name);\n      }\n    } else {\n      console.log('‚ö†Ô∏è EmailJS not configured, using simulation');\n      console.log('Missing credentials:');\n      if (!EMAILJS_SERVICE_ID) console.log('- Service ID');\n      if (!EMAILJS_TEMPLATE_ID) console.log('- Template ID');\n      if (!EMAILJS_USER_ID) console.log('- User ID');\n\n      // Fallback: Show the reset link in console for testing\n      console.log('üìß Password Reset Email (Simulated)');\n      console.log('To:', email);\n      console.log('Reset Link:', resetLink);\n      console.log('In a real app, this would be sent via email');\n\n      // For testing purposes, you can copy this link\n      alert(`For testing: Copy this reset link: ${resetLink}`);\n      return 'Reset link generated (check console for testing)';\n    }\n  } catch (error) {\n    console.error('Failed to send email:', error);\n    throw new Error('Failed to send password reset email');\n  }\n};\n\n// Alternative: Send email using a simple HTTP request to a backend\nexport const sendPasswordResetEmailSimple = async (email, name) => {\n  try {\n    // Generate reset token\n    const token = generateResetToken();\n    saveResetToken(email, token);\n\n    // Create reset link\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\n\n    // In a real app, you would make an HTTP request to your backend\n    // const response = await fetch('/api/send-reset-email', {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify({ email, name, resetLink })\n    // });\n\n    // For now, simulate the email sending\n    console.log('üìß Password Reset Email (Simulated)');\n    console.log('To:', email);\n    console.log('Reset Link:', resetLink);\n\n    // Show the link for testing\n    alert(`For testing: Copy this reset link: ${resetLink}`);\n    return 'Reset link generated successfully';\n  } catch (error) {\n    console.error('Failed to send email:', error);\n    throw new Error('Failed to send password reset email');\n  }\n};","map":{"version":3,"names":["EMAILJS_SERVICE_ID","EMAILJS_TEMPLATE_ID","EMAILJS_USER_ID","generateResetToken","token","Math","random","toString","substring","resetTokens","Map","saveResetToken","email","expires","Date","setHours","getHours","set","validateResetToken","tokenData","get","delete","removeResetToken","sendPasswordResetEmail","name","resetLink","window","location","origin","encodeURIComponent","emailData","to_email","to_name","reset_link","from_name","console","log","emailjs","default","init","result","send","emailError","error","message","code","text","warn","sendPasswordResetEmailSimple","alert","Error"],"sources":["D:/Curser Projects/src/services/emailService.ts"],"sourcesContent":["// Email service for sending password reset emails\r\n// This uses EmailJS as a free email service\r\n\r\ninterface EmailData extends Record<string, unknown> {\r\n  to_email: string;\r\n  to_name: string;\r\n  reset_link: string;\r\n  from_name: string;\r\n}\r\n\r\n// EmailJS configuration\r\n// Replace these with your actual EmailJS credentials\r\nconst EMAILJS_SERVICE_ID = 'service_2u8d39s'; // e.g., 'service_abc123'\r\nconst EMAILJS_TEMPLATE_ID = 'template_zyxc7dj'; // e.g., 'template_xyz789'\r\nconst EMAILJS_USER_ID = 'EN-JTkX7Rw0oDM-K_'; // e.g., 'user_def456'\r\n\r\n// Generate a secure reset token\r\nexport const generateResetToken = (): string => {\r\n  const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n  return token;\r\n};\r\n\r\n// Store reset tokens (in a real app, this would be in a database)\r\nconst resetTokens = new Map<string, { email: string; expires: Date }>();\r\n\r\n// Save reset token\r\nexport const saveResetToken = (email: string, token: string): void => {\r\n  const expires = new Date();\r\n  expires.setHours(expires.getHours() + 1); // Token expires in 1 hour\r\n  \r\n  resetTokens.set(token, { email, expires });\r\n};\r\n\r\n// Validate reset token\r\nexport const validateResetToken = (token: string): string | null => {\r\n  const tokenData = resetTokens.get(token);\r\n  \r\n  if (!tokenData) {\r\n    return null; // Token not found\r\n  }\r\n  \r\n  if (new Date() > tokenData.expires) {\r\n    resetTokens.delete(token); // Remove expired token\r\n    return null; // Token expired\r\n  }\r\n  \r\n  return tokenData.email;\r\n};\r\n\r\n// Remove used token\r\nexport const removeResetToken = (token: string): void => {\r\n  resetTokens.delete(token);\r\n};\r\n\r\n// Send password reset email using EmailJS\r\nexport const sendPasswordResetEmail = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Generate reset token\r\n    const token = generateResetToken();\r\n    saveResetToken(email, token);\r\n    \r\n    // Create reset link\r\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n    \r\n    // Email data\r\n    const emailData: EmailData = {\r\n      to_email: email,\r\n      to_name: name,\r\n      reset_link: resetLink,\r\n      from_name: 'News App Team'\r\n    };\r\n\r\n    console.log('üîß EmailJS Configuration Check:');\r\n    console.log('Service ID:', EMAILJS_SERVICE_ID);\r\n    console.log('Template ID:', EMAILJS_TEMPLATE_ID);\r\n    console.log('User ID:', EMAILJS_USER_ID);\r\n    console.log('Email Data:', emailData);\r\n\r\n    // Check if all credentials are properly configured\r\n    console.log('üîç Checking credentials...');\r\n    console.log('Service ID exists:', !!EMAILJS_SERVICE_ID);\r\n    console.log('Template ID exists:', !!EMAILJS_TEMPLATE_ID);\r\n    console.log('User ID exists:', !!EMAILJS_USER_ID);\r\n    console.log('All credentials exist:', !!(EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID));\r\n\r\n    if (EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID) {\r\n      console.log('‚úÖ All credentials found, attempting EmailJS...');\r\n      try {\r\n        console.log('üìß Attempting to send real email via EmailJS...');\r\n        \r\n        // Import EmailJS\r\n        const emailjs = await import('@emailjs/browser');\r\n        \r\n        // Initialize EmailJS with your user ID\r\n        emailjs.default.init(EMAILJS_USER_ID);\r\n        \r\n        console.log('üìß EmailJS initialized successfully');\r\n        console.log('üìß Sending email with data:', emailData);\r\n        \r\n        // Send the email\r\n        const result = await emailjs.default.send(\r\n          EMAILJS_SERVICE_ID,\r\n          EMAILJS_TEMPLATE_ID,\r\n          emailData,\r\n          EMAILJS_USER_ID\r\n        );\r\n        \r\n        console.log('‚úÖ Email sent successfully:', result);\r\n        return 'Email sent successfully! Check your inbox for the password reset link.';\r\n      } catch (emailError: any) {\r\n        console.error('‚ùå EmailJS error details:', emailError);\r\n        console.error('‚ùå Error message:', emailError.message);\r\n        console.error('‚ùå Error code:', emailError.code);\r\n        console.error('‚ùå Error text:', emailError.text);\r\n        \r\n        // Check for specific EmailJS errors\r\n        if (emailError.text) {\r\n          console.error('‚ùå EmailJS error text:', emailError.text);\r\n        }\r\n        \r\n        console.warn('üìß Falling back to simulation due to EmailJS error');\r\n        // Fall back to simulation\r\n        return sendPasswordResetEmailSimple(email, name);\r\n      }\r\n    } else {\r\n      console.log('‚ö†Ô∏è EmailJS not configured, using simulation');\r\n      console.log('Missing credentials:');\r\n      if (!EMAILJS_SERVICE_ID) console.log('- Service ID');\r\n      if (!EMAILJS_TEMPLATE_ID) console.log('- Template ID');\r\n      if (!EMAILJS_USER_ID) console.log('- User ID');\r\n      \r\n      // Fallback: Show the reset link in console for testing\r\n      console.log('üìß Password Reset Email (Simulated)');\r\n      console.log('To:', email);\r\n      console.log('Reset Link:', resetLink);\r\n      console.log('In a real app, this would be sent via email');\r\n      \r\n      // For testing purposes, you can copy this link\r\n      alert(`For testing: Copy this reset link: ${resetLink}`);\r\n      \r\n      return 'Reset link generated (check console for testing)';\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    throw new Error('Failed to send password reset email');\r\n  }\r\n};\r\n\r\n// Alternative: Send email using a simple HTTP request to a backend\r\nexport const sendPasswordResetEmailSimple = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Generate reset token\r\n    const token = generateResetToken();\r\n    saveResetToken(email, token);\r\n    \r\n    // Create reset link\r\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n    \r\n    // In a real app, you would make an HTTP request to your backend\r\n    // const response = await fetch('/api/send-reset-email', {\r\n    //   method: 'POST',\r\n    //   headers: { 'Content-Type': 'application/json' },\r\n    //   body: JSON.stringify({ email, name, resetLink })\r\n    // });\r\n    \r\n    // For now, simulate the email sending\r\n    console.log('üìß Password Reset Email (Simulated)');\r\n    console.log('To:', email);\r\n    console.log('Reset Link:', resetLink);\r\n    \r\n    // Show the link for testing\r\n    alert(`For testing: Copy this reset link: ${resetLink}`);\r\n    \r\n    return 'Reset link generated successfully';\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    throw new Error('Failed to send password reset email');\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}