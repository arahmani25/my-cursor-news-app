{"ast":null,"code":"var _jsxFileName = \"D:\\\\Curser Projects\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { loginUser, registerUser, resetPassword, checkEmailExists } from '../services/authService';\nimport { sendWelcomeEmail } from '../services/emailService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored user data on app load\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const userData = JSON.parse(storedUser);\n      setUser(userData);\n      setIsAuthenticated(true);\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const userData = await loginUser(email, password);\n      setUser(userData);\n      setIsAuthenticated(true);\n      localStorage.setItem('currentUser', JSON.stringify(userData));\n    } catch (error) {\n      throw error;\n    }\n  };\n  const register = async (email, password, name) => {\n    try {\n      const userData = await registerUser(email, password, name);\n      setUser(userData);\n      setIsAuthenticated(true);\n      localStorage.setItem('currentUser', JSON.stringify(userData));\n\n      // Send welcome email (non-blocking)\n      try {\n        await sendWelcomeEmail(email, name);\n        console.log('✅ Welcome email sent successfully');\n      } catch (welcomeError) {\n        console.warn('⚠️ Welcome email failed, but registration was successful:', welcomeError);\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('currentUser');\n  };\n  const saveArticle = article => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        savedArticles: [...user.savedArticles, article]\n      };\n      setUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n    }\n  };\n  const unsaveArticle = articleUrl => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        savedArticles: user.savedArticles.filter(article => article.url !== articleUrl)\n      };\n      setUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      const emailExists = await checkEmailExists(email);\n      if (!emailExists) {\n        throw new Error('Email not found in our system');\n      }\n      // In a real app, this would send an email\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const resetUserPassword = async (email, newPassword) => {\n    try {\n      await resetPassword(email, newPassword);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    saveArticle,\n    unsaveArticle,\n    isAuthenticated,\n    forgotPassword,\n    resetUserPassword,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"MIOyihIJe1jbesOAPrjh1+/HIzc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","loginUser","registerUser","resetPassword","checkEmailExists","sendWelcomeEmail","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","storedUser","localStorage","getItem","userData","JSON","parse","login","email","password","setItem","stringify","error","register","name","console","log","welcomeError","warn","logout","removeItem","saveArticle","article","updatedUser","savedArticles","unsaveArticle","articleUrl","filter","url","forgotPassword","emailExists","resetUserPassword","newPassword","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Curser Projects/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { AuthContextType, User, Article } from '../types';\r\nimport { \r\n  loginUser, \r\n  registerUser, \r\n  resetPassword, \r\n  checkEmailExists,\r\n  getUserById \r\n} from '../services/authService';\r\nimport { sendWelcomeEmail } from '../services/emailService';\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored user data on app load\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    if (storedUser) {\r\n      const userData = JSON.parse(storedUser);\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      const userData = await loginUser(email, password);\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('currentUser', JSON.stringify(userData));\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (email: string, password: string, name: string) => {\r\n    try {\r\n      const userData = await registerUser(email, password, name);\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('currentUser', JSON.stringify(userData));\r\n      \r\n      // Send welcome email (non-blocking)\r\n      try {\r\n        await sendWelcomeEmail(email, name);\r\n        console.log('✅ Welcome email sent successfully');\r\n      } catch (welcomeError) {\r\n        console.warn('⚠️ Welcome email failed, but registration was successful:', welcomeError);\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('currentUser');\r\n  };\r\n\r\n  const saveArticle = (article: Article) => {\r\n    if (user) {\r\n      const updatedUser = {\r\n        ...user,\r\n        savedArticles: [...user.savedArticles, article],\r\n      };\r\n      setUser(updatedUser);\r\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\r\n    }\r\n  };\r\n\r\n  const unsaveArticle = (articleUrl: string) => {\r\n    if (user) {\r\n      const updatedUser = {\r\n        ...user,\r\n        savedArticles: user.savedArticles.filter(\r\n          (article) => article.url !== articleUrl\r\n        ),\r\n      };\r\n      setUser(updatedUser);\r\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\r\n    }\r\n  };\r\n\r\n  const forgotPassword = async (email: string) => {\r\n    try {\r\n      const emailExists = await checkEmailExists(email);\r\n      if (!emailExists) {\r\n        throw new Error('Email not found in our system');\r\n      }\r\n      // In a real app, this would send an email\r\n      return true;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const resetUserPassword = async (email: string, newPassword: string) => {\r\n    try {\r\n      await resetPassword(email, newPassword);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    saveArticle,\r\n    unsaveArticle,\r\n    isAuthenticated,\r\n    forgotPassword,\r\n    resetUserPassword,\r\n    loading\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}