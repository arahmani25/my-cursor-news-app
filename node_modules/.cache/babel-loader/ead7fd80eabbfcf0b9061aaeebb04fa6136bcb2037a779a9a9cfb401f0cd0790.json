{"ast":null,"code":"// Mock database for users (in a real app, this would be a backend API)\n\n// Initialize with some default users\nconst users = [{\n  id: '1',\n  email: 'admin@newsapp.com',\n  name: 'Admin User',\n  password: 'Admin123!',\n  // In real app, this would be hashed\n  role: 'admin',\n  isActive: true,\n  savedArticles: [],\n  createdAt: new Date().toISOString(),\n  lastLogin: new Date().toISOString()\n}, {\n  id: '2',\n  email: 'user@newsapp.com',\n  name: 'Test User',\n  password: 'User123!',\n  // In real app, this would be hashed\n  role: 'user',\n  isActive: true,\n  savedArticles: [],\n  createdAt: new Date().toISOString(),\n  lastLogin: new Date().toISOString()\n}];\n\n// Load users from localStorage on startup\nconst loadUsers = () => {\n  const stored = localStorage.getItem('users');\n  if (stored) {\n    return JSON.parse(stored);\n  }\n  // Save default users\n  localStorage.setItem('users', JSON.stringify(users));\n  return users;\n};\n\n// Save users to localStorage\nconst saveUsers = users => {\n  localStorage.setItem('users', JSON.stringify(users));\n};\n\n// Get all users (for admin)\nexport const getAllUsers = () => {\n  return loadUsers();\n};\n\n// Register new user\nexport const registerUser = async (email, password, name) => {\n  const currentUsers = loadUsers();\n\n  // Check if email already exists\n  if (currentUsers.find(user => user.email.toLowerCase() === email.toLowerCase())) {\n    throw new Error('Email already registered');\n  }\n\n  // Validate password strength\n  const passwordErrors = validatePassword(password);\n  if (passwordErrors.length > 0) {\n    throw new Error(passwordErrors.join(', '));\n  }\n\n  // Validate email format\n  if (!isValidEmail(email)) {\n    throw new Error('Invalid email format');\n  }\n  const newUser = {\n    id: `user-${Date.now()}`,\n    email: email.toLowerCase(),\n    name,\n    password,\n    // In real app, this would be hashed\n    role: 'user',\n    isActive: true,\n    savedArticles: [],\n    createdAt: new Date().toISOString()\n  };\n  currentUsers.push(newUser);\n  saveUsers(currentUsers);\n\n  // Return user without password\n  const {\n    password: _,\n    ...userWithoutPassword\n  } = newUser;\n  return userWithoutPassword;\n};\n\n// Login user\nexport const loginUser = async (email, password) => {\n  const currentUsers = loadUsers();\n  const user = currentUsers.find(u => u.email.toLowerCase() === email.toLowerCase() && u.password === password);\n  if (!user) {\n    throw new Error('Invalid email or password');\n  }\n  if (!user.isActive) {\n    throw new Error('Account is deactivated. Please contact administrator.');\n  }\n\n  // Update last login\n  user.lastLogin = new Date().toISOString();\n  saveUsers(currentUsers);\n\n  // Return user without password\n  const {\n    password: _,\n    ...userWithoutPassword\n  } = user;\n  return userWithoutPassword;\n};\n\n// Reset password\nexport const resetPassword = async (email, newPassword) => {\n  const currentUsers = loadUsers();\n  const user = currentUsers.find(u => u.email.toLowerCase() === email.toLowerCase());\n  if (!user) {\n    throw new Error('User not found');\n  }\n\n  // Validate new password\n  const passwordErrors = validatePassword(newPassword);\n  if (passwordErrors.length > 0) {\n    throw new Error(passwordErrors.join(', '));\n  }\n  user.password = newPassword; // In real app, this would be hashed\n  saveUsers(currentUsers);\n};\n\n// Check if email exists (for forgot password)\nexport const checkEmailExists = async email => {\n  const currentUsers = loadUsers();\n  return currentUsers.some(user => user.email.toLowerCase() === email.toLowerCase());\n};\n\n// Admin functions\nexport const updateUserStatus = async (userId, isActive) => {\n  const currentUsers = loadUsers();\n  const user = currentUsers.find(u => u.id === userId);\n  if (!user) {\n    throw new Error('User not found');\n  }\n  user.isActive = isActive;\n  saveUsers(currentUsers);\n};\nexport const updateUserRole = async (userId, role) => {\n  const currentUsers = loadUsers();\n  const user = currentUsers.find(u => u.id === userId);\n  if (!user) {\n    throw new Error('User not found');\n  }\n  user.role = role;\n  saveUsers(currentUsers);\n};\nexport const deleteUser = async userId => {\n  const currentUsers = loadUsers();\n  const filteredUsers = currentUsers.filter(u => u.id !== userId);\n  if (filteredUsers.length === currentUsers.length) {\n    throw new Error('User not found');\n  }\n  saveUsers(filteredUsers);\n};\n\n// Validation functions\nexport const validatePassword = password => {\n  const errors = [];\n  if (password.length < 8) {\n    errors.push('Password must be at least 8 characters long');\n  }\n  if (!/[A-Z]/.test(password)) {\n    errors.push('Password must contain at least one uppercase letter');\n  }\n  if (!/[a-z]/.test(password)) {\n    errors.push('Password must contain at least one lowercase letter');\n  }\n  if (!/\\d/.test(password)) {\n    errors.push('Password must contain at least one number');\n  }\n  if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n    errors.push('Password must contain at least one special character');\n  }\n  return errors;\n};\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Get user by ID\nexport const getUserById = userId => {\n  const currentUsers = loadUsers();\n  const user = currentUsers.find(u => u.id === userId);\n  if (!user) return null;\n  const {\n    password: _,\n    ...userWithoutPassword\n  } = user;\n  return userWithoutPassword;\n};","map":{"version":3,"names":["users","id","email","name","password","role","isActive","savedArticles","createdAt","Date","toISOString","lastLogin","loadUsers","stored","localStorage","getItem","JSON","parse","setItem","stringify","saveUsers","getAllUsers","registerUser","currentUsers","find","user","toLowerCase","Error","passwordErrors","validatePassword","length","join","isValidEmail","newUser","now","push","_","userWithoutPassword","loginUser","u","resetPassword","newPassword","checkEmailExists","some","updateUserStatus","userId","updateUserRole","deleteUser","filteredUsers","filter","errors","test","emailRegex","getUserById"],"sources":["D:/Curser Projects/src/services/authService.ts"],"sourcesContent":["import { User } from '../types';\r\n\r\n// Mock database for users (in a real app, this would be a backend API)\r\ninterface StoredUser extends User {\r\n  password: string;\r\n  role: 'user' | 'admin';\r\n  isActive: boolean;\r\n  createdAt: string;\r\n  lastLogin?: string;\r\n}\r\n\r\n// Initialize with some default users\r\nconst users: StoredUser[] = [\r\n  {\r\n    id: '1',\r\n    email: 'admin@newsapp.com',\r\n    name: 'Admin User',\r\n    password: 'Admin123!', // In real app, this would be hashed\r\n    role: 'admin',\r\n    isActive: true,\r\n    savedArticles: [],\r\n    createdAt: new Date().toISOString(),\r\n    lastLogin: new Date().toISOString()\r\n  },\r\n  {\r\n    id: '2',\r\n    email: 'user@newsapp.com',\r\n    name: 'Test User',\r\n    password: 'User123!', // In real app, this would be hashed\r\n    role: 'user',\r\n    isActive: true,\r\n    savedArticles: [],\r\n    createdAt: new Date().toISOString(),\r\n    lastLogin: new Date().toISOString()\r\n  }\r\n];\r\n\r\n// Load users from localStorage on startup\r\nconst loadUsers = (): StoredUser[] => {\r\n  const stored = localStorage.getItem('users');\r\n  if (stored) {\r\n    return JSON.parse(stored);\r\n  }\r\n  // Save default users\r\n  localStorage.setItem('users', JSON.stringify(users));\r\n  return users;\r\n};\r\n\r\n// Save users to localStorage\r\nconst saveUsers = (users: StoredUser[]) => {\r\n  localStorage.setItem('users', JSON.stringify(users));\r\n};\r\n\r\n// Get all users (for admin)\r\nexport const getAllUsers = (): StoredUser[] => {\r\n  return loadUsers();\r\n};\r\n\r\n// Register new user\r\nexport const registerUser = async (email: string, password: string, name: string): Promise<User> => {\r\n  const currentUsers = loadUsers();\r\n  \r\n  // Check if email already exists\r\n  if (currentUsers.find(user => user.email.toLowerCase() === email.toLowerCase())) {\r\n    throw new Error('Email already registered');\r\n  }\r\n\r\n  // Validate password strength\r\n  const passwordErrors = validatePassword(password);\r\n  if (passwordErrors.length > 0) {\r\n    throw new Error(passwordErrors.join(', '));\r\n  }\r\n\r\n  // Validate email format\r\n  if (!isValidEmail(email)) {\r\n    throw new Error('Invalid email format');\r\n  }\r\n\r\n  const newUser: StoredUser = {\r\n    id: `user-${Date.now()}`,\r\n    email: email.toLowerCase(),\r\n    name,\r\n    password, // In real app, this would be hashed\r\n    role: 'user',\r\n    isActive: true,\r\n    savedArticles: [],\r\n    createdAt: new Date().toISOString()\r\n  };\r\n\r\n  currentUsers.push(newUser);\r\n  saveUsers(currentUsers);\r\n\r\n  // Return user without password\r\n  const { password: _, ...userWithoutPassword } = newUser;\r\n  return userWithoutPassword;\r\n};\r\n\r\n// Login user\r\nexport const loginUser = async (email: string, password: string): Promise<User> => {\r\n  const currentUsers = loadUsers();\r\n  \r\n  const user = currentUsers.find(\r\n    u => u.email.toLowerCase() === email.toLowerCase() && u.password === password\r\n  );\r\n\r\n  if (!user) {\r\n    throw new Error('Invalid email or password');\r\n  }\r\n\r\n  if (!user.isActive) {\r\n    throw new Error('Account is deactivated. Please contact administrator.');\r\n  }\r\n\r\n  // Update last login\r\n  user.lastLogin = new Date().toISOString();\r\n  saveUsers(currentUsers);\r\n\r\n  // Return user without password\r\n  const { password: _, ...userWithoutPassword } = user;\r\n  return userWithoutPassword;\r\n};\r\n\r\n// Reset password\r\nexport const resetPassword = async (email: string, newPassword: string): Promise<void> => {\r\n  const currentUsers = loadUsers();\r\n  \r\n  const user = currentUsers.find(u => u.email.toLowerCase() === email.toLowerCase());\r\n  if (!user) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  // Validate new password\r\n  const passwordErrors = validatePassword(newPassword);\r\n  if (passwordErrors.length > 0) {\r\n    throw new Error(passwordErrors.join(', '));\r\n  }\r\n\r\n  user.password = newPassword; // In real app, this would be hashed\r\n  saveUsers(currentUsers);\r\n};\r\n\r\n// Check if email exists (for forgot password)\r\nexport const checkEmailExists = async (email: string): Promise<boolean> => {\r\n  const currentUsers = loadUsers();\r\n  return currentUsers.some(user => user.email.toLowerCase() === email.toLowerCase());\r\n};\r\n\r\n// Admin functions\r\nexport const updateUserStatus = async (userId: string, isActive: boolean): Promise<void> => {\r\n  const currentUsers = loadUsers();\r\n  const user = currentUsers.find(u => u.id === userId);\r\n  \r\n  if (!user) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  user.isActive = isActive;\r\n  saveUsers(currentUsers);\r\n};\r\n\r\nexport const updateUserRole = async (userId: string, role: 'user' | 'admin'): Promise<void> => {\r\n  const currentUsers = loadUsers();\r\n  const user = currentUsers.find(u => u.id === userId);\r\n  \r\n  if (!user) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  user.role = role;\r\n  saveUsers(currentUsers);\r\n};\r\n\r\nexport const deleteUser = async (userId: string): Promise<void> => {\r\n  const currentUsers = loadUsers();\r\n  const filteredUsers = currentUsers.filter(u => u.id !== userId);\r\n  \r\n  if (filteredUsers.length === currentUsers.length) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  saveUsers(filteredUsers);\r\n};\r\n\r\n// Validation functions\r\nexport const validatePassword = (password: string): string[] => {\r\n  const errors: string[] = [];\r\n  \r\n  if (password.length < 8) {\r\n    errors.push('Password must be at least 8 characters long');\r\n  }\r\n  \r\n  if (!/[A-Z]/.test(password)) {\r\n    errors.push('Password must contain at least one uppercase letter');\r\n  }\r\n  \r\n  if (!/[a-z]/.test(password)) {\r\n    errors.push('Password must contain at least one lowercase letter');\r\n  }\r\n  \r\n  if (!/\\d/.test(password)) {\r\n    errors.push('Password must contain at least one number');\r\n  }\r\n  \r\n  if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n    errors.push('Password must contain at least one special character');\r\n  }\r\n  \r\n  return errors;\r\n};\r\n\r\nexport const isValidEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n// Get user by ID\r\nexport const getUserById = (userId: string): User | null => {\r\n  const currentUsers = loadUsers();\r\n  const user = currentUsers.find(u => u.id === userId);\r\n  \r\n  if (!user) return null;\r\n  \r\n  const { password: _, ...userWithoutPassword } = user;\r\n  return userWithoutPassword;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}