{"ast":null,"code":"// Email service for sending password reset emails\n// This uses EmailJS as a free email service\n// EmailJS configuration\n// Replace these with your actual EmailJS credentials\nconst EMAILJS_SERVICE_ID='service_2u8d39s';// e.g., 'service_abc123'\nconst EMAILJS_TEMPLATE_ID='template_zyxc7dj';// e.g., 'template_xyz789'\nconst EMAILJS_USER_ID='EN-JTkX7Rw0oDM-K_';// e.g., 'user_def456'\n// Generate a secure reset token\nexport const generateResetToken=()=>{const token=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);return token;};// Store reset tokens (in a real app, this would be in a database)\nconst resetTokens=new Map();// Save reset token\nexport const saveResetToken=(email,token)=>{const expires=new Date();expires.setHours(expires.getHours()+1);// Token expires in 1 hour\nresetTokens.set(token,{email,expires});};// Validate reset token\nexport const validateResetToken=token=>{const tokenData=resetTokens.get(token);if(!tokenData){return null;// Token not found\n}if(new Date()>tokenData.expires){resetTokens.delete(token);// Remove expired token\nreturn null;// Token expired\n}return tokenData.email;};// Remove used token\nexport const removeResetToken=token=>{resetTokens.delete(token);};// Send password reset email using EmailJS\nexport const sendPasswordResetEmail=async(email,name)=>{try{// Generate reset token\nconst token=generateResetToken();saveResetToken(email,token);// Create reset link\nconst resetLink=`${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;// Email data\nconst emailData={to_email:email,to_name:name,reset_link:resetLink,from_name:'News App Team'};// If EmailJS is configured, send real email\nif(EMAILJS_SERVICE_ID&&EMAILJS_TEMPLATE_ID&&EMAILJS_USER_ID){try{// Try to import EmailJS\nconst emailjs=await import('@emailjs/browser');await emailjs.default.send(EMAILJS_SERVICE_ID,EMAILJS_TEMPLATE_ID,emailData,EMAILJS_USER_ID);return'Email sent successfully';}catch(importError){console.warn('EmailJS not available, falling back to simulation:',importError);// Fall back to simulation\nreturn sendPasswordResetEmailSimple(email,name);}}else{// Fallback: Show the reset link in console for testing\nconsole.log('ðŸ“§ Password Reset Email (Simulated)');console.log('To:',email);console.log('Reset Link:',resetLink);console.log('In a real app, this would be sent via email');// For testing purposes, you can copy this link\nalert(`For testing: Copy this reset link: ${resetLink}`);return'Reset link generated (check console for testing)';}}catch(error){console.error('Failed to send email:',error);throw new Error('Failed to send password reset email');}};// Alternative: Send email using a simple HTTP request to a backend\nexport const sendPasswordResetEmailSimple=async(email,name)=>{try{// Generate reset token\nconst token=generateResetToken();saveResetToken(email,token);// Create reset link\nconst resetLink=`${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;// In a real app, you would make an HTTP request to your backend\n// const response = await fetch('/api/send-reset-email', {\n//   method: 'POST',\n//   headers: { 'Content-Type': 'application/json' },\n//   body: JSON.stringify({ email, name, resetLink })\n// });\n// For now, simulate the email sending\nconsole.log('ðŸ“§ Password Reset Email (Simulated)');console.log('To:',email);console.log('Reset Link:',resetLink);// Show the link for testing\nalert(`For testing: Copy this reset link: ${resetLink}`);return'Reset link generated successfully';}catch(error){console.error('Failed to send email:',error);throw new Error('Failed to send password reset email');}};","map":{"version":3,"names":["EMAILJS_SERVICE_ID","EMAILJS_TEMPLATE_ID","EMAILJS_USER_ID","generateResetToken","token","Math","random","toString","substring","resetTokens","Map","saveResetToken","email","expires","Date","setHours","getHours","set","validateResetToken","tokenData","get","delete","removeResetToken","sendPasswordResetEmail","name","resetLink","window","location","origin","encodeURIComponent","emailData","to_email","to_name","reset_link","from_name","emailjs","default","send","importError","console","warn","sendPasswordResetEmailSimple","log","alert","error","Error"],"sources":["D:/Curser Projects/src/services/emailService.ts"],"sourcesContent":["// Email service for sending password reset emails\r\n// This uses EmailJS as a free email service\r\n\r\ninterface EmailData extends Record<string, unknown> {\r\n  to_email: string;\r\n  to_name: string;\r\n  reset_link: string;\r\n  from_name: string;\r\n}\r\n\r\n// EmailJS configuration\r\n// Replace these with your actual EmailJS credentials\r\nconst EMAILJS_SERVICE_ID = 'service_2u8d39s'; // e.g., 'service_abc123'\r\nconst EMAILJS_TEMPLATE_ID = 'template_zyxc7dj'; // e.g., 'template_xyz789'\r\nconst EMAILJS_USER_ID = 'EN-JTkX7Rw0oDM-K_'; // e.g., 'user_def456'\r\n\r\n// Generate a secure reset token\r\nexport const generateResetToken = (): string => {\r\n  const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n  return token;\r\n};\r\n\r\n// Store reset tokens (in a real app, this would be in a database)\r\nconst resetTokens = new Map<string, { email: string; expires: Date }>();\r\n\r\n// Save reset token\r\nexport const saveResetToken = (email: string, token: string): void => {\r\n  const expires = new Date();\r\n  expires.setHours(expires.getHours() + 1); // Token expires in 1 hour\r\n  \r\n  resetTokens.set(token, { email, expires });\r\n};\r\n\r\n// Validate reset token\r\nexport const validateResetToken = (token: string): string | null => {\r\n  const tokenData = resetTokens.get(token);\r\n  \r\n  if (!tokenData) {\r\n    return null; // Token not found\r\n  }\r\n  \r\n  if (new Date() > tokenData.expires) {\r\n    resetTokens.delete(token); // Remove expired token\r\n    return null; // Token expired\r\n  }\r\n  \r\n  return tokenData.email;\r\n};\r\n\r\n// Remove used token\r\nexport const removeResetToken = (token: string): void => {\r\n  resetTokens.delete(token);\r\n};\r\n\r\n// Send password reset email using EmailJS\r\nexport const sendPasswordResetEmail = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Generate reset token\r\n    const token = generateResetToken();\r\n    saveResetToken(email, token);\r\n    \r\n    // Create reset link\r\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n    \r\n    // Email data\r\n    const emailData: EmailData = {\r\n      to_email: email,\r\n      to_name: name,\r\n      reset_link: resetLink,\r\n      from_name: 'News App Team'\r\n    };\r\n\r\n    // If EmailJS is configured, send real email\r\n    if (EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_USER_ID) {\r\n      try {\r\n        // Try to import EmailJS\r\n        const emailjs = await import('@emailjs/browser');\r\n        \r\n        await emailjs.default.send(\r\n          EMAILJS_SERVICE_ID,\r\n          EMAILJS_TEMPLATE_ID,\r\n          emailData,\r\n          EMAILJS_USER_ID\r\n        );\r\n        \r\n        return 'Email sent successfully';\r\n      } catch (importError) {\r\n        console.warn('EmailJS not available, falling back to simulation:', importError);\r\n        // Fall back to simulation\r\n        return sendPasswordResetEmailSimple(email, name);\r\n      }\r\n    } else {\r\n      // Fallback: Show the reset link in console for testing\r\n      console.log('ðŸ“§ Password Reset Email (Simulated)');\r\n      console.log('To:', email);\r\n      console.log('Reset Link:', resetLink);\r\n      console.log('In a real app, this would be sent via email');\r\n      \r\n      // For testing purposes, you can copy this link\r\n      alert(`For testing: Copy this reset link: ${resetLink}`);\r\n      \r\n      return 'Reset link generated (check console for testing)';\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    throw new Error('Failed to send password reset email');\r\n  }\r\n};\r\n\r\n// Alternative: Send email using a simple HTTP request to a backend\r\nexport const sendPasswordResetEmailSimple = async (email: string, name: string): Promise<string> => {\r\n  try {\r\n    // Generate reset token\r\n    const token = generateResetToken();\r\n    saveResetToken(email, token);\r\n    \r\n    // Create reset link\r\n    const resetLink = `${window.location.origin}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n    \r\n    // In a real app, you would make an HTTP request to your backend\r\n    // const response = await fetch('/api/send-reset-email', {\r\n    //   method: 'POST',\r\n    //   headers: { 'Content-Type': 'application/json' },\r\n    //   body: JSON.stringify({ email, name, resetLink })\r\n    // });\r\n    \r\n    // For now, simulate the email sending\r\n    console.log('ðŸ“§ Password Reset Email (Simulated)');\r\n    console.log('To:', email);\r\n    console.log('Reset Link:', resetLink);\r\n    \r\n    // Show the link for testing\r\n    alert(`For testing: Copy this reset link: ${resetLink}`);\r\n    \r\n    return 'Reset link generated successfully';\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    throw new Error('Failed to send password reset email');\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}